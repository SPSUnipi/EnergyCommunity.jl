var documenterSearchIndex = {"docs":
[{"location":"examples/non_cooperative/#Non-Cooperative-Energy-Community","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"","category":"section"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"This example is taken from the article Optimal sizing of energy communities with fair revenue sharing and exit clauses: Value, role and business model of aggregators and users by Davide Fioriti et al, url but for a subset of users","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"The energy community considered in this example consists of 3 users, where:","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"all users can install PV system\nonly the first user cannot install batteries, whereas the others can\nthe third user can install also wind turbines","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Import the needed packages","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"using EnergyCommunity, JuMP\nusing HiGHS, Plots, FileIO","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Create a base Energy Community example in the data folder; use the default configuration.","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"folder = joinpath(@__DIR__, \"data\")\ncreate_example_data(folder, config_name=\"default\")","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Input file to load the structure of the energy community based on a yaml file.","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"input_file = joinpath(@__DIR__, \"data/energy_community_model.yml\");\nnothing #hide","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Output path of the summary and of the plots","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"output_file_isolated = joinpath(@__DIR__, \"./results/output_file_NC.xlsx\");\noutput_plot_isolated = joinpath(@__DIR__, \"./results/Img/plot_user_{:s}_NC.png\");\nnothing #hide","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"define optimizer and options","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"optimizer = optimizer_with_attributes(HiGHS.Optimizer, \"ipm_optimality_tolerance\"=>1e-6)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Define the Non Cooperative model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"NC_Model = ModelEC(input_file, EnergyCommunity.GroupNC(), optimizer)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Build the mathematical model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"build_model!(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Optimize the model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"optimize!(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"get objective value","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"objective_value(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Create plots of the results","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"plot(NC_Model, output_plot_isolated)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Print summaries of the results","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"print_summary(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Save summaries","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"save_summary(NC_Model, output_file_isolated)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Plot the sankey plot of resources","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"plot_sankey(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"DataFrame of the business plan","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"business_plan(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"plot business plan","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"business_plan_plot(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"save the model to a jld2 file","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"save(\"nc_model.jld2\", NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"read the loaded model from the jld2 file","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"NC_Model_loaded = load!(\"nc_model.jld2\", ModelEC())","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"get the objective value of the loaded model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"objective_value(NC_Model_loaded)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cooperative/#Cooperative-Energy-Community","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"","category":"section"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"This example is taken from the article Optimal sizing of energy communities with fair revenue sharing and exit clauses: Value, role and business model of aggregators and users by Davide Fioriti et al, url but for a subset of users","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"The energy community considered in this example consists of 3 users, where:","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"all users can install PV system\nonly the first user cannot install batteries, whereas the others can\nthe third user can install also wind turbines","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Import the needed packages","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"using EnergyCommunity, JuMP\nusing HiGHS, Plots, FileIO","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Create a base Energy Community example in the data folder; use the default configuration.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"folder = joinpath(@__DIR__, \"data\")\ncreate_example_data(folder, config_name=\"default\")","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Input file to load the structure of the energy community based on a yaml file.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"input_file = joinpath(@__DIR__, \"data/energy_community_model.yml\");\nnothing #hide","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Output path of the summary and of the plots","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"output_file_isolated = joinpath(@__DIR__, \"./results/output_file_CO.xlsx\");\noutput_plot_isolated = joinpath(@__DIR__, \"./results/Img/plot_user_{:s}_CO.png\");\nnothing #hide","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"define optimizer and options","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"optimizer = optimizer_with_attributes(HiGHS.Optimizer, \"ipm_optimality_tolerance\"=>1e-6)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Define the Non Cooperative model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"CO_Model = ModelEC(input_file, EnergyCommunity.GroupCO(), optimizer)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Build the mathematical model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"build_model!(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Optimize the model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"optimize!(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"get objective value","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"objective_value(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Create plots of the results","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"plot(CO_Model, output_plot_isolated)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Print summaries of the results","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"print_summary(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Save summaries","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"save_summary(CO_Model, output_file_isolated)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Plot the sankey plot of resources","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"plot_sankey(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"DataFrame of the business plan","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"business_plan(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"plot business plan","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"business_plan_plot(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"save the model to a jld2 file","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"save(\"co_model.jld2\", CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"read the loaded model from the jld2 file","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"CO_Model_loaded = load!(\"co_model.jld2\", ModelEC())","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"get the objective value of the loaded model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"objective_value(CO_Model_loaded)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Example","page":"Manual","title":"Example","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"using JuMP, BilevelJuMP, Cbc\n\nmodel = BilevelModel(Cbc.Optimizer, mode = BilevelJuMP.SOS1Mode())\n\n@variable(Lower(model), x)\n@variable(Upper(model), y)\n\n@objective(Upper(model), Min, 3x + y)\n@constraints(Upper(model), begin\n    x <= 5\n    y <= 8\n    y >= 0\nend)\n\n@objective(Lower(model), Min, -x)\n@constraints(Lower(model), begin\n     x +  y <= 8\n    4x +  y >= 8\n    2x +  y <= 13\n    2x - 7y <= 0\nend)\n\noptimize!(model)\n\nobjective_value(model) # = 3 * (3.5 * 8/15) + 8/15 # = 6.13...\nvalue(x) # = 3.5 * 8/15 # = 1.86...\nvalue(y) # = 8/15 # = 0.53...","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The option BilevelJuMP.SOS1Mode() indicates that the solution method used will be a KKT reformulation emplying SOS1 to model complementarity constraints and solve the problem with MIP solvers (Cbc, Xpress, Gurobi, CPLEX, SCIP).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Alternatively, the option BilevelJuMP.IndicatorMode() is almost equivalent to the previous. The main difference is that it relies on Indicator constraints instead. This kind of constraints is available in some MIP solvers.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"A third and classic option it the BilevelJuMP.FortunyAmatMcCarlMode(), which relies on the Fortuny-Amat and McCarl big-M method that requires a MIP solver with very basic functionality, i.e., just binary variables are needed. The main drawback of this method is that one must provide bounds for all primal and dual variables. However, if the bounds are good, this method can be more efficient than the previous. Bound hints to compute the big-Ms can be passed with the methods: set_primal_(upper\\lower)_bound_hint(variable, bound), for primals; and set_dual_(upper\\lower)_bound_hint(constraint, bound) for duals. We can also call FortunyAmatMcCarlMode(primal_big_M = vp, dual_big_M = vd), where vp and vd are, repspectively, the big M fallback values for primal and dual variables, these are used when some variables have no given bounds, otherwise the given bounds are used instead.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Another option is BilevelJuMP.ProductMode() that reformulates the complementarity constraints as products so that the problem can be solved by NLP (Ipopt, KNITRO) solvers or even MIP solvers with the aid of binary expansions (see QuadraticToBinary.jl). Note that binary expansions require variables to have upper and lower bounds.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Finally, one can use BilevelJuMP.MixedMode(default = mode) where mode is one of the other modes described above. With this method it is possible to set complementarity reformulations per constraint with BilevelJuMP.set_mode(ctr, mode).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"An alternative to complementarity constraint reformulation is the Strong Duality reformulation which add the constraint enforcing primal dual equality. The option is BilevelJuMP.StrongDualityMode(eps) where eps is the tolance on the enforcing constraint.","category":"page"},{"location":"manual/#Note-on-[QuadraticToBinary.jl](https://github.com/joaquimg/QuadraticToBinary.jl)","page":"Manual","title":"Note on QuadraticToBinary.jl","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"QuadraticToBinary.jl is a package that converts quadratic terms in constraints and objective. To do so the pack acts like a solver on top of the real solver and most data is forwarded directly to the solver itself. For many solvers it is enough to use:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SOLVER = Xpress.Optimizer()\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(SOLVER)\nBilevelModel(Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"However, this might lead to some solver not supporting certain functionality like Cbc. In this case we need to:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SOLVER = Cbc.Optimizer()\nCACHED_SOLVER = MOI.Utilities.CachingOptimizer(\n    MOI.Utilities.UniversalFallback(MOI.Utilities.Model{Float64}()), SOLVER)\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(CACHED_SOLVER)\nBilevelModel(()->Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Note that we used ()->Q_SOLVER instead of just Q_SOLVER because BilevelModel requires as constructor and not an instance of an object.","category":"page"},{"location":"manual/#Advanced-Features","page":"Manual","title":"Advanced Features","text":"","category":"section"},{"location":"manual/#Lower-level-dual-variables","page":"Manual","title":"Lower level dual variables","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Suppose you have a constraint b in the lower level:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@constraint(Lower(model), b, ...)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It is possible to access the dual variable of b to use it in the upper level:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@variable(Upper(model), lambda, DualOf(b))","category":"page"},{"location":"manual/#Conic-lower-level","page":"Manual","title":"Conic lower level","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"BilevelJuMP allows users to write conic models in the lower level. However, solving this kind of problems is much harder and requires complex solution methods. Mosek's Conic MIP can be used with the aid of QuadraticToBinary.jl.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It is also possible to solve Second Order Cone constrained models with Ipopt. In this case we need to add a special, non-standard bridge, to Ipopt as follows:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"IPO_OPT = Ipopt.Optimizer(print_level=0)\nIPO = MOI.Bridges.Constraint.SOCtoNonConvexQuad{Float64}(IPO_OPT)\nBilevelModel(()->IPO, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"installation/#Installation-guide","page":"Installation guide","title":"Installation guide","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"This guide explains how to install EnergyCommunity.jl and its dependencies.","category":"page"},{"location":"installation/#Install-Julia","page":"Installation guide","title":"Install Julia","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"EnergyCommunity.jl is a Julia package. To use it, you need to install Julia. You can download Julia from the official website.","category":"page"},{"location":"installation/#Install-EnergyCommunity.jl","page":"Installation guide","title":"Install EnergyCommunity.jl","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"To install EnergyCommunity.jl, you can use the Julia package manager. Open Julia and run the following commands:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> import Pkg\n\njulia> Pkg.add(\"EnergyCommunity\")","category":"page"},{"location":"installation/#Install-a-solver","page":"Installation guide","title":"Install a solver","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"EnergyCommunity.jl requires an optimization solver to solve the optimization problem. You can use any optimization solver compatible with JuMP.jl. For example, you can use the open-source solver HiGHS. To install HiGHS, run the following command:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> Pkg.add(\"HiGHS\")","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"It is recommended to use a solver capable of Mixed-Integer Linear Programming. You can find a list of solvers compatible with JuMP.jl here.","category":"page"},{"location":"installation/#Install-input/output-packages","page":"Installation guide","title":"Install input/output packages","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"EnergyCommunity.jl also supports input/output featurs, such as saving/loading a model to disk or plotting results. To install the plotting package Plots.jl, run the following command:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> Pkg.add(\"Plots\")","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"To install FileIO.jl that is used to export the model to disk, run the following command:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> Pkg.add(\"FileIO\")","category":"page"},{"location":"API reference/#API-Reference","page":"API reference","title":"API Reference","text":"","category":"section"},{"location":"API reference/#Base.copy-Tuple{ModelEC}","page":"API reference","title":"Base.copy","text":"Base.copy(model_copy::ModelEC)\n\nCreate a copy of a ModelEC opject\n\nArguments\n\nmodel_copy::ModelEC: model to copy\n\n\n\n\n\n","category":"method"},{"location":"API reference/#Base.deepcopy-Tuple{ModelEC}","page":"API reference","title":"Base.deepcopy","text":"Base.deepcopy(model_copy::ModelEC)\n\nCreate a deepcopy of a ModelEC opject\n\nArguments\n\nmodel_copy::ModelEC: model to copy\n\n\n\n\n\n","category":"method"},{"location":"API reference/#Base.zero-Tuple{ModelEC}","page":"API reference","title":"Base.zero","text":"Base.zero(::ModelEC)\n\nFunction zero to represent the empty ModelEC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._jump_to_dict-Tuple{JuMP.Model}","page":"API reference","title":"EnergyCommunity._jump_to_dict","text":"_jump_to_dict\n\nFunction to turn a JuMP model to a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._print_summary-Tuple{IO, AbstractEC}","page":"API reference","title":"EnergyCommunity._print_summary","text":"_print_summary(io::IO, model::AbstractEC)\n\nPrint a plain-text summary of model to io.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._verify_data-Tuple{Dict}","page":"API reference","title":"EnergyCommunity._verify_data","text":"_verify_data(data::Dict)\n\nFunction to verify the data loaded from the disk (Not yet implemented)\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._verify_users_data-Tuple{Dict}","page":"API reference","title":"EnergyCommunity._verify_users_data","text":"_verify_users_data(users_data::Dict)\n\nFunction to verify the users data loaded from the disk\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_EC_economics_summary!-Tuple{Vector{T} where T, AbstractEC}","page":"API reference","title":"EnergyCommunity.add_EC_economics_summary!","text":"add_EC_economics_summary!(output_list::Vector, ECModel::AbstractEC)\n\nFunction to create the output dataframe of the economics of the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_EC_peak_summary!-Tuple{Vector{T} where T, AbstractEC}","page":"API reference","title":"EnergyCommunity.add_EC_peak_summary!","text":"add_EC_peak_summary!(output_list::Vector, ECModel::AbstractEC)\n\nFunction to create the output dataframe of peak power for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_branching_priorities!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.add_branching_priorities!","text":"add_branching_priorities!(ECModel::AbstractEC, ::Any) end\n\nGeneral fallback for branching priorities\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_info_solution_summary!-Tuple{Vector{T} where T, AbstractEC}","page":"API reference","title":"EnergyCommunity.add_info_solution_summary!","text":"add_info_solution_summary!(output_list::Vector, ECModel::AbstractEC)\n\nUtility function to create the dataframe to report the status of the optimization. It adds a dataframe named info_solution to output_list with the solve time and the termination status of the optimization.\n\nArguments\n\noutput_list::Vector: The list of dataframes to be saved\nECModel::AbstractEC: The EC model to be built\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_notations!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.add_notations!","text":"add_notations!(ECModel::AbstractEC, ::Any)\n\nGeneral fallback for notations\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_users_design_summary!-Tuple{Vector{T} where T, AbstractEC, AbstractVector{T} where T}","page":"API reference","title":"EnergyCommunity.add_users_design_summary!","text":"add_users_design_summary!(output_list::Vector, ECModel::AbstractEC, user_set::AbstractVector)\n\nUtility function to create the output dataframe of design capacity. It adds a dataframe with the peak demand, yearly demand, and optimal size of the system for each user.\n\nArguments\n\noutput_list::Vector: The list of dataframes to be saved\nECModel::AbstractEC: The EC model to be built\nuser_set::AbstractVector: The user set to be considered\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_users_economics_summary!-Tuple{Vector{T} where T, AbstractEC, AbstractVector{T} where T}","page":"API reference","title":"EnergyCommunity.add_users_economics_summary!","text":"add_users_economics_summary!(output_list::Vector, ECModel::AbstractEC, user_set::AbstractVector)\n\nFunction to create the output dataframe of the users' economics. It adds a dataframe with the NPV, CAPEX, OPEX, yearly revenues, and other economic indicators for each user.\n\nArguments\n\noutput_list::Vector: The list of dataframes to be saved\nECModel::AbstractEC: The EC model to be built\nuser_set::AbstractVector: The user set to be considered\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_users_peak_summary!-Tuple{Vector{T} where T, AbstractEC, AbstractVector{T} where T}","page":"API reference","title":"EnergyCommunity.add_users_peak_summary!","text":"add_users_peak_summary!(output_list::Vector, ECModel::AbstractEC, user_set::AbstractVector)\n\nFunction to create the output dataframe of peak power. It adds a dataframe with the peak power of each user for each peak period.\n\nArguments\n\noutput_list::Vector: The list of dataframes to be saved\nECModel::AbstractEC: The EC model to be built\nuser_set::AbstractVector: The user set to be considered\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names-Tuple{Any, ASSET_TYPE}","page":"API reference","title":"EnergyCommunity.asset_names","text":"Function to get the list of the assets for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names-Tuple{Any, Vector{ASSET_TYPE}}","page":"API reference","title":"EnergyCommunity.asset_names","text":"Function to get the list of the assets for a user in a list of elements\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names-Tuple{Any}","page":"API reference","title":"EnergyCommunity.asset_names","text":"Function to get the list of the assets for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names_ex-Tuple{Any, Vector{ASSET_TYPE}}","page":"API reference","title":"EnergyCommunity.asset_names_ex","text":"Function to get the list of the assets for a user in a list of elements except a list of given types\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_type-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.asset_type","text":"Function to get the asset type of a component\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_model!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.build_base_model!","text":"build_base_model!(ECModel::AbstractEC, optimizer)\n\nCreates the base optimization model for all the EC models\n\nArguments\n\nECModel: EC model object\noptimizer: optimizer object; any optimizer from JuMP\nuse_notations: boolean; if true, the model will be created using the direct mode to create the JuMP model\n\nReturns\n\nIt returns the ECModel object with the base model created\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_utility!-Tuple{AbstractEC, AbstractGroupANC}","page":"API reference","title":"EnergyCommunity.build_base_utility!","text":"build_base_utility!(ECModel::AbstractEC, base_group::AbstractGroupANC; base_model=nothing)\n\nWhen in the CO case the ANC model is used as base case, then this function builds the corresponding constraint\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nbase_group::AbstractGroupANC: Type of the base case to consider\nbase_model::ModelEC: Model of the base case to consider\n\nReturns\n\nBaseUtility: JuMP expression of the base utility\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_utility!-Tuple{AbstractEC, AbstractGroupNC}","page":"API reference","title":"EnergyCommunity.build_base_utility!","text":"build_base_utility!(ECModel::AbstractEC, base_group::AbstractGroupNC; base_model=nothing)\n\nWhen in the CO case the NC model is used as base case, then this function builds the corresponding constraint\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nbase_group::AbstractGroupNC: Type of the base case to consider\nbase_model::ModelEC: Model of the base case to consider\n\nReturns\n\nBaseUtility: JuMP expression of the base utility\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_utility!-Tuple{AbstractEC, Vararg{Any, N} where N}","page":"API reference","title":"EnergyCommunity.build_base_utility!","text":"build_base_utility!(ECModel::AbstractEC, no_aggregator_group::AbstractGroupANC)\n\nWhen in the CO case the ANC model is used as reference case for when the aggregator is not in the group, then this function builds the corresponding constraint\n\nNot implemented\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_least_profitable!-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.build_least_profitable!","text":"build_least_profitable!(\n    ECModel::AbstractEC, base_group::AbstractGroup;\n    no_aggregator_group::AbstractGroup=GroupNC(),\n    add_EC=true,\n    relax_combinatorial=false,\n    use_notations=false,\n    base_model=nothing,\n)\n\nFunction to build the model to identify the least profitable coalition. This function builds the model in the ECModel object to identify the least profitable coalition using a MILP model.\n\nArguments\n\nECModel::AbstractEC: EC Model of the EC to study.\nbase_group::AbstractGroup: Type of the base case to consider\nno_aggregator_group::AbstractGroup=GroupNC(): Type of the base case to consider when no aggregator is in the coalition\nadd_EC::Bool=true: Flag to include the EC in the coalition\nrelax_combinatorial::Bool=false: Flag to relax the combinatorial part of the MILP model\nuse_notations::Bool=false: Flag to use notations in the model\nbase_model::ModelEC=nothing: Model of the base case to consider\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_model!-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.build_model!","text":"build_model!(ECModel::AbstractEC; kwargs...)\n\nBuild the mathematical problem for the EC.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_model!-Tuple{AbstractGroup, AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.build_model!","text":"build_model!(group_type::AbstractGroup, ECModel::AbstractEC, optimizer; use_notations=false)\n\nBuild function model for generic EnergyCommunity model. This functions triggers specific functions for the different aggregation types.\n\nIn particular, first the function build_base_model! is called to build the base model of the EC. Then, the function build_specific_model! is called to build the specific model of the EC dependin on the group type. Finally, the function set_objective! is called to set the objective of the EC, based on their group type.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_no_agg_utility!-Tuple{AbstractEC, AbstractGroupANC}","page":"API reference","title":"EnergyCommunity.build_no_agg_utility!","text":"build_no_agg_utility!(ECModel::AbstractEC, no_aggregator_group::AbstractGroupANC; base_model=nothing)\n\nWhen in the CO case the ANC model is used as reference case for when the aggregator is not in the group, then this function builds the corresponding constraint\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nno_aggregator_group::AbstractGroupANC: Type of the base case to consider\nbase_model::ModelEC: Model of the base case to consider\n\nReturns\n\nSW: JuMP expression of the Social Welfare\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_no_agg_utility!-Tuple{AbstractEC, AbstractGroupNC}","page":"API reference","title":"EnergyCommunity.build_no_agg_utility!","text":"buildnoaggutility!(ECModel::AbstractEC, noaggregator_group::AbstractGroupNC; kwargs...)\n\nWhen the NC case is the reference value when no aggregator is available, then no changes in the model are required\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nno_aggregator_group::AbstractGroupNC: Type of the base case to consider\n\nReturns\n\nSW: JuMP expression of the Social Welfare; the same as in the input model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_no_agg_utility!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.build_no_agg_utility!","text":"build_no_agg_utility!(ECModel::AbstractEC, no_aggregator_group::Any)\n\nNot implemented case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_noagg_least_profitable!-Tuple{ModelEC}","page":"API reference","title":"EnergyCommunity.build_noagg_least_profitable!","text":"build_noagg_least_profitable(ECModel::ModelEC; use_notations=false, optimizer=nothing, base_model=nothing)\n\nFunction to create a specialized model to identify the least profitable coalition for an energy community of ANC type.\n\nArguments\n\nECModel::ModelEC: Model of the community\nuse_notations::Bool=false: Flag to use notations in the model\noptimizer::Optimizer=nothing: Optimizer to use\nbase_model::ModelEC=nothing: Model of the base case to consider\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_specific_model!-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.build_specific_model!","text":"build_specific_model!(::AbstractGroupANC, ECModel::AbstractEC)\n\nSet the ANC-specific model for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_specific_model!-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.build_specific_model!","text":"build_specific_model!(::AbstractGroupCO, ECModel::AbstractEC)\n\nSet the CO-specific model for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_specific_model!-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.build_specific_model!","text":"build_specific_model!(::AbstractGroupNC, ECModel::AbstractEC)\n\nSet the NC-specific model for the EC. It adds the P_agg expression only being equal to the sum of the power supplied by the users to the grid.\n\nArguments\n\ngroup_type::AbstractGroupNC: The type of group model\nECModel::AbstractEC: The EC model to be built\n\nReturns\n\nECModel::AbstractEC: The EC model with the specific model built\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.business_plan","page":"API reference","title":"EnergyCommunity.business_plan","text":"business_plan(ECModel::AbstractEC, profit_distribution=nothing, user_set_financial=nothing)\n\nFunction to describe the business plan\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nprofit_distribution: (optional) DenseAxisArray with the profit distribution by user\nuser_set_financial: (optional) User set to be considered for the financial analysis\n\nReturns\n\nThe output value is a DataFrame with the business plan information\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.business_plan_plot","page":"API reference","title":"EnergyCommunity.business_plan_plot","text":"business_plan_plot(ECModel::AbstractEC, ...)\n\nFunction to plot the business plan of the EnergyCommunity.\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nprofit_distribution: (optional) Dictionary with the profit distribution by user\nuser_set_financial: (optional) User set to be considered for the financial analysis\nplot_struct: (optional) Dictionary with the structure of the plot. The keys are the labels of the bars and the values are a list of tuples with the sign and the name of the variable to be plotted. Example is Dict(\"CAPEX\" => [(-1, :CAPEX)]) for plotting the CAPEX with a negative sign.\nxlabel: (optional) Label for the x-axis\nylabel: (optional) Label for the y-axis\ntitle: (optional) Title of the plot\nlegend: (optional) Position of the legend\ncolor: (optional) Color of the bars\nxrotation: (optional) Rotation of the x-axis labels\nbar_width: (optional) Width of the bars\ngrid: (optional) Grid visibility\nframestyle: (optional) Style of the frame\nbarmode: (optional) Mode of the bars\nscaling_factor: (optional) Scaling factor for the values\nkwargs: (optional) Additional arguments to be passed to Plots.bar function\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.calculate_demand-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_demand","text":"calculate_demand(ECModel::AbstractEC)\n\nFunction to calculate the demand by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the demand by user and the whole EC as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the energy community and users. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the power fed to the grid for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the Aggregated Non Cooperative case. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the power fed to the grid for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the Cooperative case. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nReturns a DenseAxisArray that contains the reliance on the grid supply for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(::AbstractGroupNC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the Non-Cooperative case Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nReturns a DenseAxisArray that contains the reliance on the grid supply for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the energy community and users. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the power withdrawn from the grid for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the Aggregated Non Cooperative case. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the power withdrawn from the grid for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the Cooperative case. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nReturns a DenseAxisArray that describes the reliance on the grid withdrawal for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(::AbstractGroupNC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the Non Cooperative case. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nReturns a DenseAxisArray that describes the reliance on the grid withdrawal for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_production","text":"calculate_production(ECModel::AbstractEC)\n\nFunction to calculate the energy production by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the production by user and the whole EC as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_production_shares-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_production_shares","text":"calculate_production_shares(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate energy ratio by energy production resource for a generic group Output is normalized with respect to the demand when per_unit is true\n\nArguments\n\nECModel: EC model object\nper_unit: boolean; if true, the output is normalized with respect to the demand\n\nReturns\n\nIt returns a DenseAxisArray describing the share of energy production by  energy resource by user and the entire system, optionally normalized with respect to the demand of the corresponding group, when per_unit is true\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_self_consumption-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_self_consumption","text":"calculate_self_consumption(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the demand that each user meets using its own sources, or self consumption. Output is normalized with respect to the demand when per_unit is true\n\nArguments\n\nECModel: EC model object\nper_unit: boolean; if true, the output is normalized with respect to the demand\n\nReturns\n\nIt returns a DenseAxisArray describing the self consumption for each user and the aggregation, optionally normalized with respect to the demand of the corresponding group, when per_unit is true\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_self_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_self_production","text":"calculate_self_production(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the self production for each user. Output is normalized with respect to the demand when per_unit is true\n\nArguments\n\nECModel: EC model object\nper_unit: boolean; if true, the output is normalized with respect to the demand\n\nReturns\n\nIt returns a DenseAxisArray describing the self production for each user and the aggregation, optionally normalized with respect to the demand of the corresponding group, when per_unit is true\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the demand that each user meets using its own sources or other users. When onlyshared is false, also self consumption is considered, otherwise only shared consumption. Output is normalized with respect to the demand when perunit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power withdrawn from the grid but consumed by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the demand that each user meets using its own sources or other users for the Aggregated Non Cooperative case. In this case, there can be shared energy, non only self consumption. When onlyshared is false, also self consumption is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power withdrawn from the grid but produced by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the demand that each user meets using its own sources or other users for the Cooperative case. In the Cooperative case, there can be shared energy, non only self consumption. When onlyshared is false, also self consumption is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\nReturns\n\nIt returns the shared consumption for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(::AbstractGroupNC, ECModel::AbstractEC; kwargs...)\n\nCalculate the demand that each user meets using its own sources or other users for the Non-Cooperative case. In the Non-Cooperative case, there is no shared energy, only self consumption. Shared energy means energy that is shared between  Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nIt returns the shared consumption for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the energy that each user produces and uses in its own POD or it is commercially consumed within the EC, when creaded. When onlyshared is false, also self production is considered, otherwise only shared energy. Output is normalized with respect to the demand when perunit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power fed to the grid but consumed by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the shared produced energy for the Aggregated Non Cooperative case. In this case, there can be shared energy between users, not only self production. When onlyshared is false, also self production is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power fed to the grid but consumed by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production. When onlyshared is false, also self production is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\nReturns\n\nIt returns a DenseAxisArray that contains the shared energy for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(::AbstractGroupNC, ECModel::AbstractEC; kwargs...)\n\nCalculate the shared produced energy for the Non-Cooperative case. In the Non-Cooperative case, there is no shared energy between users, only self production. Output is normalized with respect to the demand when per_unit is true\n\nReturns\n\nIt returns a DenseAxisArray that contains the shared energy for each user and the aggregation\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_tes_losses-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_tes_losses","text":"calculate_tes_losses(ECModel::AbstractEC)\n\nFunction to calculate the thermal energy losses by thermal storage by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the thermal energy losses by user /and the whole EC/ as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_th_demand-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_th_demand","text":"calculate_th_demand(ECModel::AbstractEC)\n\nFunction to calculate the thermal demand by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the thermal demand by user /and the whole EC/ as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_th_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_th_production","text":"calculate_th_production(ECModel::AbstractEC)\n\nFunction to calculate the thermal energy production by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the thermal production by user /and the whole EC/ as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(ECModel::AbstractEC)\n\nCalculate the time series of the shared consumed energy for the Energy Community.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power withdrawn from the grid but produced by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(::AbstractGroupANC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared consumed energy for the Aggregated Non Cooperative case. In the Aggregated Non Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power withdrawn from the grid but produced by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(::AbstractGroupCO, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared consumed energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\nReturns\n\nIt returns a DenseAxisArray that quantifies the shared consumption for each user and the aggregation and time step\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(::AbstractGroupNC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared consumed energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\nReturns\n\nIt returns a DenseAxisArray that quantifies the shared consumption for each user and the aggregation and time step\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(ECModel::AbstractEC; kwargs...)\n\nCalculate the time series of the shared consumed energy for the Energy Community.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power fed to the grid but consumed by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(::AbstractGroupANC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared produced energy for the Aggregated Non Cooperative case. In the Aggregated Non Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\nReturns\n\nIt returns a DenseAxisArray containing the time-dependent share of power fed to the grid but consumed by another user for each user and the whole aggregate\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(::AbstractGroupCO, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\nReturns\n\nReturns a DenseAxisArray that contains the shared production for each user and the aggregation and time step\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(::AbstractGroupNC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\nReturns\n\nReturns a DenseAxisArray that contains the shared production for each user and the aggregation and time step\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.check_valid_data_dict-Tuple{Dict}","page":"API reference","title":"EnergyCommunity.check_valid_data_dict","text":"check_valid_data_dict(raw_dict_data::Dict)\n\nCheck whether the dictionary data has the needed components. The dictionary must have the keys \"general\", \"users\", and \"market\".\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.component-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.component","text":"Function to get the components value of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.components-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.components","text":"Function to get the components list of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.create_example_data-Tuple{Any}","page":"API reference","title":"EnergyCommunity.create_example_data","text":"create_example_data(parent_folder, config_name::String = \"default\")\n\nCreate an example data for the Energy Community model. This function creates in the specified folder the necessary data to run the Energy Community model, based on the specified configuration name.\n\nArguments\n\nparent_folder: Parent folder where the example data will be created\nconfig_name: Configuration name to be used to create the example data   Supported values: \"default\"\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.create_output_data-Tuple{ModelEC, Any}","page":"API reference","title":"EnergyCommunity.create_output_data","text":"create_output_data(ecm_copy::ModelEC, number_of_solutions)\n\nFunction to create output data after the optimization for TheoryOfGames.jl. This functions obtains multiple solutions out of the optimization.\n\nArguments\n\necm_copy::ModelEC: Model of the community\nnumber_of_solutions::Int: Number of solutions to return\n\nReturns\n\noutput_data::Vector{NamedTuple}: Output data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.data_sankey-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.data_sankey","text":"data_sankey(ECModel::AbstractEC; name_units=nothing, norm_value=nothing, market_color = palette(:rainbow)[2], community_color = palette(:rainbow)[5], users_colors = palette(:default))\n\nFunction to create the input data for plotting any Sankey diagram representing the energy flows across the energy community\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nname_units: (optional) Labels used for the sankey diagram with the following order:   \"Market buy\", [users labels], \"Community\", \"Market sell\", [users labels]\nnorm_value: (optional) Normalization value for the flows\nmarket_color: (optional) Color of the market\ncommunity_color: (optional) Color of the community\nusers_colors: (optional) Colors of the users\n\nReturns\n\nsank_data: Dictionary containing the data to plot the Sankey diagram, in agreement to SankeyPlots.jl package\n\"source\": sources of the Sankey\n\"target\": targets of the Sankey\n\"value\": value of each flow\n\"labels\": labels of the Sankey\n\"colors\": colors of the Sankey\n\"layer\": layer of the Sankey\n\"order\": order of the Sankey\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.device_names-Tuple{Any}","page":"API reference","title":"EnergyCommunity.device_names","text":"Function to get the list of devices for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.explode_data-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.explode_data","text":"explode_data(ECModel::AbstractEC)\n\nReturn main data elements of the dataset of the ECModel: general parameters, users data and market data, retrieved from the data dictionary of the ECModel.\n\nArguments\n\nECModel::AbstractEC: Energy Community model\n\nReturns\n\ngeneral_data::Dict: General data of the ECModel\nusers_data::Dict: Users data of the ECModel\nmarket_data::Dict: Market data of the ECModel\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.explode_data-Tuple{Any}","page":"API reference","title":"EnergyCommunity.explode_data","text":"Return main data elements of the dataset: general parameters, users data and market data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.field","page":"API reference","title":"EnergyCommunity.field","text":"Function get field that throws an error if the field is not found\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.field_component-NTuple{4, Any}","page":"API reference","title":"EnergyCommunity.field_component","text":"Function to get the components value of a dictionary, with default value\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.field_component-Tuple{Any, Any, Any}","page":"API reference","title":"EnergyCommunity.field_component","text":"Function to get the components value of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.field_d","page":"API reference","title":"EnergyCommunity.field_d","text":"Function to safely get a field of a dictionary with default value\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.finalize_results!-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.finalize_results!","text":"finalize_results!(::AbstractGroupANC, ECModel::AbstractEC)\n\nFunction to finalize the results of the Aggregated Non Cooperative model after the execution\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.finalize_results!-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.finalize_results!","text":"finalize_results!(::AbstractGroupCO, ECModel::AbstractEC)\n\nFunction to finalize the results of the Cooperative model after the execution Nothing to do\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.finalize_results!-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.finalize_results!","text":"finalize_results!(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction to finalize the results of the Non Cooperative model after the execution Many of the variables are set to zero due to the absence of cooperation between users\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.general-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.general","text":"Function to get the general parameters\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.generator_names-Tuple{Any}","page":"API reference","title":"EnergyCommunity.generator_names","text":"Function to get the list of generators for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_annotations-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.get_annotations","text":"get_annotations(ECModel::AbstractEC)\n\nGet annotations for Benders decomposition\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_group_type-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.get_group_type","text":"get_group_type(ECModel::AbstractEC)\n\nReturns the EC group type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_subproblem_vars_by_user-Union{Tuple{T}, Tuple{JuMP.Containers.DenseAxisArray{T, N, Ax, L} where {N, Ax, L<:Tuple{Vararg{JuMP.Containers._AxisLookup, N}}}, Any}} where T<:JuMP.VariableRef","page":"API reference","title":"EnergyCommunity.get_subproblem_vars_by_user","text":"get_subproblem_vars_by_user(var::Containers.DenseAxisArray{T}, u_name) where T <: VariableRef\n\nGet variables related to the user u_name for a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_subproblem_vars_by_user-Union{Tuple{T}, Tuple{JuMP.Containers.SparseAxisArray{T, N, K} where {N, K<:Tuple{Vararg{Any, N}}}, Any}} where T<:JuMP.VariableRef","page":"API reference","title":"EnergyCommunity.get_subproblem_vars_by_user","text":"get_subproblem_vars_by_user(var::Containers.SparseAxisArray{T}, u_name) where T <: VariableRef\n\nGet variables related to the user u_name for a SparseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_user_set-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.get_user_set","text":"get_user_set(ECModel::AbstractEC)\n\nReturns the EC user set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_any_asset","page":"API reference","title":"EnergyCommunity.has_any_asset","text":"Function to check whether an user has any asset\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.has_asset-Tuple{Any, ASSET_TYPE}","page":"API reference","title":"EnergyCommunity.has_asset","text":"Function to check whether an user has an asset type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_asset-Tuple{Any, AbstractString}","page":"API reference","title":"EnergyCommunity.has_asset","text":"Function to check whether an user has an asset given its name\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_component-Tuple{Any, Any, Any}","page":"API reference","title":"EnergyCommunity.has_component","text":"Function to know if a dictionary has a particular component\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_type-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.has_type","text":"Auxiliary function to check if the key 'type' is available in the dictionary d, otherwise false\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.load!-Tuple{AbstractString, AbstractEC}","page":"API reference","title":"EnergyCommunity.load!","text":"load!(output_file::AbstractString, ECModel::AbstractEC)\n\nLoads the Energy Community model stored in the file specified by output_file and updates the relevant fields of ECModel. This function performs basic checks on the loaded data, verifying the existence of the necessary keys (\"data\", \"userset\", \"grouptype\", \"results\"), and restores the model components (such as data, users_data, and results) accordingly.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.market-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.market","text":"Function to get the market configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.market_profile_by_user-Tuple{AbstractEC, Any, Any}","page":"API reference","title":"EnergyCommunity.market_profile_by_user","text":"market_profile_by_user(ECModel::AbstractEC, u_name, profile_name)\n\nFunction to retrieve the market profile of each user, according to their market type (e.g. commercial, domestic, etc.)\n\nArguments\n\nECModel: EC model object\nu_name: user name\nprofile_name: profile name\n\nReturns\n\nIt returns the vector of data corresponding to the profile of the user according to the market type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.name-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.name","text":"name(model::AbstractEC)\n\nReturn the name of the model.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.name-Tuple{ModelEC}","page":"API reference","title":"EnergyCommunity.name","text":"name(model::ModelEC)\n\nReturn the name of the model.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"objective_by_user(ECModel::AbstractEC; add_EC=true)\n\nReturns the objective function by user; when add_EC is true, the EC is added to the user set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by user in the Aggregated Non Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by user in the Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by user in the NonCooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-NTuple{4, Any}","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to throw error for unformatted data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Tuple{Any, Any, Any, AbstractString}","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a string value of a profile to load the corresponding dataframe\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Tuple{Any, Any, Any, Dict}","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a personalized processing to generate the data When profile_value is a dictionary, then the user is asking a custom processing of data by a function\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Union{Tuple{T}, Tuple{Any, Any, Any, AbstractVector{T}}} where T<:Real","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a string value of a profile to load the corresponding dataframe\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Union{Tuple{T}, Tuple{Any, Any, Any, T}} where T<:Real","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a string value of a profile to load the corresponding dataframe\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_peak_quantity_by_time_vectors-NTuple{5, Any}","page":"API reference","title":"EnergyCommunity.parse_peak_quantity_by_time_vectors","text":"Function to parse the peak power categories and tariff\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.plot_sankey-Tuple{AbstractEC, Dict}","page":"API reference","title":"EnergyCommunity.plot_sankey","text":"plot_sankey(ECModel::AbstractEC, sank_data::Dict; label_size = 10)\n\nFunction to plot the Sankey diagram representing the energy flows across the energy community. This function can be used to plot the sankey diagram of already processed data sank_data.\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nsank_data::Dict: Dictionary containing the data to plot the Sankey diagram, in agreement to SankeyPlots.jl package\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.plot_sankey-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.plot_sankey","text":"function plot_sankey(ECModel::AbstractEC; name_units=nothing, norm_value=nothing, market_color=palette(:rainbow)[2], community_color=palette(:rainbow)[5], users_colors=palette(:default), label_size=10)\n\nFunction to plot the Sankey diagram representing the energy flows across the energy community\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nname_units: (optional) Labels used for the sankey diagram with the following order:   \"Market buy\", [users labels], \"Community\", \"Market sell\", [users labels]\nnorm_value: (optional) Normalization value for the flows\nmarket_color: (optional) Color of the market\ncommunity_color: (optional) Color of the community\nusers_colors: (optional) Colors of the users\nlabel_size: (optional) Size of the labels in the Sankey diagram\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.prepare_summary-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.prepare_summary","text":"prepare_summary(::AbstractGroupANC, ECModel::AbstractEC;\n    user_set::Vector=Vector())\n\nSave base excel file with a summary of the results for the Aggregated Non Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.prepare_summary-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.prepare_summary","text":"prepare_summary(::AbstractGroupCO, ECModel::AbstractEC; user_set::Vector=Vector())\n\nSave base excel file with a summary of the results for the Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.prepare_summary-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.prepare_summary","text":"prepare_summary(::AbstractGroupNC, ECModel::AbstractEC, file_summary_path::AbstractString;\n    user_set::Vector=Vector())\n\nPrepare the dataframe lists to be saved in an excel file.\n\nArguments\n\ngroup_type::AbstractGroupNC: The type of group model\nECModel::AbstractEC: The EC model to be built\nfile_summary_path::AbstractString: The file path where to save the excel file\nuser_set::AbstractVector: The user set to be considered\n\nReturns\n\noutput_list::Vector: The list of dataframes to be saved in the excel file\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(ECModel::AbstractEC; kwargs...)\n\nFunction to print a summary of the results of the model. The function dispatches the execution to the appropriate function depending on the Aggregation type of the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(::AbstractGroupANC, ECModel::AbstractEC)\n\nFunction to print the main results of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(::AbstractGroupCO, ECModel::AbstractEC)\n\nFunction to print the main results of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction to print the main results of the model\n\nArguments\n\ngroup_type::AbstractGroupNC: The type of group model\nECModel::AbstractEC: The EC model to be built\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.profile-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.profile","text":"Function to get a specific profile\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.profile_component-Tuple{Any, Any, Any}","page":"API reference","title":"EnergyCommunity.profile_component","text":"Function to get a specific profile\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.profiles-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.profiles","text":"Function to get the profile dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.read_input-Tuple{AbstractString}","page":"API reference","title":"EnergyCommunity.read_input","text":"Function to read the input of the optimization model described as a yaml file\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.reset_user_set!-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.reset_user_set!","text":"reset_user_set!(ECModel::AbstractEC)\n\nReset the EC user set to match the stored user_set of the ECModel data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.save_summary-Tuple{AbstractEC, AbstractString}","page":"API reference","title":"EnergyCommunity.save_summary","text":"save_summary(ECModel::AbstractEC, output_file::AbstractString; kwargs...)\n\nFunction to save a summary of the results of the model. The function dispatches the execution to the appropriate function depending on the Aggregation type of the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_group_type!-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.set_group_type!","text":"set_group_type!(ECModel::AbstractEC)\n\nSets the EC group type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_least_profitable_profit!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.set_least_profitable_profit!","text":"set_least_profitable_profit!(ECModel::AbstractEC, profit_distribution)\n\nFunction to set the profit distribution of the least profitable problem.\n\nArguments\n\nECModel::AbstractEC: Model of the community\nprofit_distribution::AbstractDict: Profit distribution per user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_objective!-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.set_objective!","text":"Function to set the objective function of the model of the Aggregated-Non-Cooperative model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_objective!-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.set_objective!","text":"set_objective!(::AbstractGroupCO, ECModel::AbstractEC)\n\nSet the objective for the cooperative approach\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_objective!-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.set_objective!","text":"set_objective!(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction to set the objective function of the model of the Non-Cooperative model, which is to maximize the annual profits of all users.\n\nArguments\n\ngroup_type::AbstractGroupNC: The type of group model\nECModel::AbstractEC: The EC model to be built\n\nReturns\n\nECModel::AbstractEC: The EC model with the objective set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_user_set!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.set_user_set!","text":"set_user_set(ECModel::AbstractEC)\n\nSets the EC user set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.split_financial_terms","page":"API reference","title":"EnergyCommunity.split_financial_terms","text":"split_financial_terms(ECModel::AbstractEC, profit_distribution=nothing)\n\nFunction to describe the cost term distributions for each user. Each entry that follows is DenseAxisArray for an economic parameter by user.\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nprofit_distribution: (optional) DenseAxisArray with the profit distribution by user\n\nReturns\n\nThe output value is a NamedTuple with the following elements:\n\nNPV: the NPV of each user given the final profit_distribution adjustment by game theory\nCAPEX: the annualized CAPEX\nOPEX: the annualized operating costs (yearly maintenance and yearly peak and energy grid charges)\nREP: the annualized replacement costs\nRV: the annualized recovery charges\nREWARD: the annualized reward distribution by user\nPEAK: the annualized peak costs\nEN_SELL: the annualized revenues from energy sales\nEN_BUY: the annualized costs from energy consumption and buying\nEN_NET: the annualized net energy costs\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.split_yearly_financial_terms","page":"API reference","title":"EnergyCommunity.split_yearly_financial_terms","text":"splityearlyfinancialterms(ECModel::AbstractEC, profitdistribution)\n\nFunction to describe the cost term distributions by all users for year. It returns major economic inputs summed across users and the community by year.\n\nArguments\n\nECModel::AbstractEC: Energy Community model\nprofit_distribution: (optional) DenseAxisArray with the profit distribution by user\n\nReturns\n\nThe output value is a NamedTuple with the following elements:\n\nNPV: the NPV of each user given the final profit_distribution adjustment by game theory\nCAPEX: the CAPEX by year\nOPEX: the operating costs by year (yearly maintenance and yearly peak and energy grid charges)\nREP: the replacement costs by year\nRV: the recovery charges by year\nREWARD: the reward distribution by year\nPEAK: the peak costs by year\nEN_SELL: the revenues from energy sales by year\nEN_BUY: the costs from energy consumption and buying by year\nEN_NET: the net energy costs by year\nyear_set: the list of years under consideration\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.to_least_profitable_coalition_callback-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.to_least_profitable_coalition_callback","text":"to_least_profitable_coalition_callback(\n    ECModel::AbstractEC,\n    base_group::AbstractGroup;\n    no_aggregator_group::AbstractGroup=GroupNC(),\n    optimizer=nothing,\n    raw_outputs=false,\n    number_of_solutions=1,\n    relax_combinatorial=false,\n    use_notations=false,\n    callback_solution=Dict(),\n    branching_priorities=true,\n    decompose_ANC=true,\n    decompose_rel_tolerance=0.05,\n    decompose_abs_tolerance=1e-2,\n    kwargs...\n)\n\nFunction that returns a callback function that, given as input a profit distribution scheme, returns the coalition that has the least benefit in remaining in the grand coalition. The returned function least_profitable_coalition_callback accepts an AbstractDict as argument that specifies the profit distribution by user that is used to compute the least benefit procedure.\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study. When the model is not cooperative an error is thrown.\nbase_group::AbstractGroup: Base group with respect the benefit is calculated\nno_aggregator_group::AbstractGroup=GroupNC(): Type of aggregation group of the community when no aggregator is available\noptimizer::Optimizer=nothing: Optimizer to use\nraw_outputs::Bool=false: Flag to return raw outputs; see return section for more details\nnumber_of_solutions::Int=1: Number of solutions to return from each iteration; when number_of_solutions <= 0 all solutions are returned\nrelax_combinatorial::Bool=false: Flag to relax the combinatorial part of the MILP model\nuse_notations::Bool=false: Flag to use notations in the model\ncallback_solution::Dict(): Dictionary of callbacks depending on the termination status of the optimization. Keys shall be of type JuMP.TerminationStatusCode, and outputs a function with as argument a ModelEC\nbranching_priorities::Bool=true: Option to specify if add the branching priorities\ndecompose_ANC::Bool=true: When True, if the noaggregatorgroup is ANC and, then the main optimization model is decomposed into two models: (a) when no Aggregator is in the coalition and (b) when the aggregator is in the coalition. In this case, (a) is optimized first and if the optimization is beyond a given threshold, the execution is terminated without optimizing (b). The threshold is provided as an optional input in the callback function returned by the function. Otherwise the optimization continues with (b).\ndecompose_rel_tolerance=0.05: Relative tolerance of the decompose_ANC procedure\ndecompose_abs_tolerance=1e-2: Absolute tolerance of the decompose_ANC procedure\n\nReturns\n\nleast_profitable_coalition_callback: Function that accepts as input an AbstractDict representing the benefit distribution by user\necm_copy: (when raw_outputs=true) ModelEC copy of the ECModel, used in the callback function\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for any model\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.   When the model is not cooperative an error is thrown.\n\nReturns\n\nobjective_callback_by_subgroup: Function that accepts as input an AbstractVector (or Set) of users and returns   as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(::AbstractGroupANC, ECModel::AbstractEC; base_model=nothing, kwargs...)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for Aggregated Non Cooperative models\n\nArguments\n\ngroup_type: The type of group model\nECModel: EC Model of the EC to study. When the model is not cooperative an error is thrown.\nbase_model: EC Model (optional). When provided, it represents the base model used to perform the calculations\n\nReturns\n\nIt returns a function that accepts as input an AbstractVector (or Set) of users and returns as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(::AbstractGroupCO, ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for Aggregated Cooperative models\n\nArguments\n\ngroup_type: The type of group model\nECModel : Cooperative EC Model of the EC to study. When the model is not cooperative an error is thrown.\nno_aggregator_group (optional, default NonCooperative): EC group type when no aggregator is considered\n\nReturns\n\nIt returns a function that accepts as input an AbstractVector (or Set) of users and returns as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for Non Cooperative models\n\nArguments\n\ngroup_type: The type of group model\nECModel : Cooperative EC Model of the EC to study. When the model is not cooperative an error is thrown.\n\nReturns\n\nIt returns a function that accepts as input an AbstractVector (or Set) of users and returns as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_utility_callback_by_subgroup-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.to_utility_callback_by_subgroup","text":"to_utility_callback_by_subgroup(\n    ECModel::AbstractEC, base_group_type::AbstractGroup;\n    no_aggregator_group::AbstractGroup=GroupNC(),\n    kwargs...\n)\n\nFunction that returns a callback function that quantifies the benefit of a given subgroup of users The returned function utility_func accepts as arguments an AbstractVector of users and returns the benefit with respect to the base case of the users optimized independently\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nbase_group_type::AbstractGroup: Type of the base case to consider\nno_aggregator_group::AbstractGroup=GroupNC(): EC group type for when no aggregator is considered\n\nReturns\n\nutility_callback_by_subgroup::Function: Function that accepts as input an AbstractVector (or Set) of users and returns as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.user_names-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.user_names","text":"Get the list of users\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.users-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.users","text":"Function to get the users configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#FileIO.load-Tuple{AbstractString, AbstractEC}","page":"API reference","title":"FileIO.load","text":"load(output_file::AbstractString, ECModel::AbstractEC)\n\nFunction to save the results and the model to the hard drive; ECModel is not modified. The function saves data, userset, grouptype and results of the ECModel in a dictionary and then saves the dictionary in the output_file.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#FileIO.save-Tuple{AbstractString, AbstractEC}","page":"API reference","title":"FileIO.save","text":"save(output_file::AbstractString, ECModel::AbstractEC)\n\nFunction to save the results and the model to the hard drive. The function saves data, userset, grouptype and results of the ECModel in a dictionary and then saves the dictionary in the output_file.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.objective_function-Tuple{AbstractEC}","page":"API reference","title":"JuMP.objective_function","text":"objective_function(ECModel::AbstractEC)\n\nGets the objective function of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.objective_value-Tuple{AbstractEC}","page":"API reference","title":"JuMP.objective_value","text":"JuMP.objective_value(ECModel::AbstractEC)\n\nReturns the objective value of the EC model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.optimize!-Tuple{AbstractEC}","page":"API reference","title":"JuMP.optimize!","text":"JuMP.optimize!(ECModel::AbstractEC)\n\nSolve the optimization problem for the EC. It optimizes the model of the EC and stores the results in the results attribute of the ECModel.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.result_count-Tuple{AbstractEC}","page":"API reference","title":"JuMP.result_count","text":"JuMP.result_count(ECModel::AbstractEC)\n\nReturns the result count of the JuMP model of the EC model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.termination_status-Tuple{AbstractEC}","page":"API reference","title":"JuMP.termination_status","text":"termination_status(ECModel::AbstractEC)\n\nCalculates the optimization status of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#RecipesBase.plot","page":"API reference","title":"RecipesBase.plot","text":"Plots.plot(ECModel::ModelEC, output_plot_file::AbstractString=\"\")\n\nFunction to plot the EC model\n\n\n\n\n\n","category":"function"},{"location":"API reference/#RecipesBase.plot-Tuple{AbstractGroupANC, AbstractEC, AbstractString}","page":"API reference","title":"RecipesBase.plot","text":"Plots.plot(::AbstractGroupANC, ECModel::AbstractEC, output_plot_file::AbstractString;\nuser_set::AbstractVector = Vector(), line_width = 2.0)\n\nFunction to plot the results of the Aggregated non cooperative configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#RecipesBase.plot-Tuple{AbstractGroupCO, AbstractEC, AbstractString}","page":"API reference","title":"RecipesBase.plot","text":"Plots.plot(::AbstractGroupCO, ECModel::AbstractEC, output_plot_file::AbstractString;\nuser_set::AbstractVector = Vector(), line_width = 2.0)\n\nFunction to plot the results of the Cooperative EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#RecipesBase.plot-Tuple{AbstractGroupNC, AbstractEC, AbstractString}","page":"API reference","title":"RecipesBase.plot","text":"Plots.plot(::AbstractGroupNC, ECModel::AbstractEC, output_plot_file::AbstractString;\n    user_set::Vector=Vector(), line_width=2.0)\n\nFunction to plot the results of the user model\n\nArguments\n\ngroup_type::AbstractGroupNC: The type of group model\nECModel::AbstractEC: The EC model to be built\noutput_plot_file::AbstractString: The file path where to save the plots\nuser_set::Vector: The user set to plot\nline_width::Float64: The width of the lines in the plot\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.AbstractEC","page":"API reference","title":"EnergyCommunity.AbstractEC","text":"AbstractEC\n\nAbstract type for an EnergyCommunity model.\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.AbstractGroup","page":"API reference","title":"EnergyCommunity.AbstractGroup","text":"AbstractGroup\n\nAbstract type for the group model; it is the parent of the three types of group models: Cooperative, Non-Cooperative, and Aggregated Non-Cooperative.\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.GroupANC","page":"API reference","title":"EnergyCommunity.GroupANC","text":"GroupANC <: AbstractGroupANC\n\nConcrete type for the Aggregated Non-Cooperative group model.\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.GroupCO","page":"API reference","title":"EnergyCommunity.GroupCO","text":"GroupCO <: AbstractGroupCO\n\nConcrete type for the Cooperative group model.\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.GroupNC","page":"API reference","title":"EnergyCommunity.GroupNC","text":"GroupNC <: AbstractGroupNC\n\nConcrete type for the Non-Cooperative group model.\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC","page":"API reference","title":"EnergyCommunity.ModelEC","text":"ModelEC <: AbstractEC\n\nConcrete type for an EnergyCommunity model.\n\nAttributes\n\ndata::Dict: All data\ngen_data::Dict: general data\nmarket_data::Dict: market data\nusers_data::Dict: users data\ngroup_type: aggregation type of model\nuser_set::Vector: desired user set\nmodel::Model: JuMP model\noptimizer: optimizer of the JuMP model\nresults::Dict: results of the model in Dictionary format\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC-2","page":"API reference","title":"EnergyCommunity.ModelEC","text":"ModelEC(model_copy::ModelEC, group_type=nothing, optimizer=nothing, user_set=nothing)\n\nCopy constructor; it copies the data from model_copy and changes the group type, optimizer, and user set if specified.\n\nArguments\n\nmodel_copy::ModelEC: model to copy\ngroup_type=nothing: aggregation type of model; default is the same as model_copy\noptimizer=nothing: optimizer of the JuMP model; default is the same as model_copy\nuser_set=nothing: desired user set; default is the same as model_copy\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC-3","page":"API reference","title":"EnergyCommunity.ModelEC","text":"ModelEC(data::Dict=ZERO_DD, group_type=GroupNC(), optimizer=nothing, user_set::Vector=Vector())\n\nConstructor of a ModelEC.\n\nArguments\n\ndata::Dict=ZERO_DD: All data; a dictionary with the keys \"general\", \"users\", and \"market\"\ngroup_type: aggregation type of model\noptimizer: optimizer of the JuMP model\nuser_set::Vector: desired user set\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC-4","page":"API reference","title":"EnergyCommunity.ModelEC","text":"ModelEC(file_name::AbstractString, group_type, optimizer=nothing)\n\nLoad EnergyCommunity model from disk\n\nArguments\n\nfile_name::AbstractString: name of the file to load the data\ngroup_type: aggregation type of model\noptimizer: optimizer of the JuMP model\n\n\n\n\n\n","category":"type"},{"location":"API reference/#TheoryOfGames.EnumMode-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"TheoryOfGames.EnumMode","text":"TheoryOfGames.EnumMode(ECModel::AbstractEC, base_group::AbstractGroup; verbose::Bool=true, kwargs...)\n\nFunction to create the EnumMode item for the TheoryOfGames.jl package.\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nbase_group::AbstractGroup: Type of the base case to consider\nverbose::Bool=true: Flag to print the results\nkwargs...: Additional arguments\n\nReturns\n\nenum_mode: TheoryOfGames.EnumMode object\n\n\n\n\n\n","category":"method"},{"location":"API reference/#TheoryOfGames.IterMode-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"TheoryOfGames.IterMode","text":"TheoryOfGames.IterMode(\n    ECModel::AbstractEC,\n    base_group_type::AbstractGroup; \n    no_aggregator_type::AbstractGroup=GroupNC(),\n    optimizer=nothing,\n    number_of_solutions=0,\n    use_notations=false,\n    decompose_ANC=true,\n    decompose_abs_tolerance=1e-4,\n    decompose_rel_tolerance=1e-4,\n    kwargs...\n)\n\nFunction to create the IterMode item for the TheoryOfGames.jl package\n\nArguments\n\nECModel::AbstractEC: Cooperative EC Model of the EC to study.\nbase_group_type::AbstractGroup: Type of the base case to consider\nno_aggregator_type::AbstractGroup=GroupNC(): Type of the base case to consider when no aggregator is available\noptimizer::Optimizer=nothing: Optimizer to use\nnumber_of_solutions::Int=0: Number of solutions to return from each iteration; when number_of_solutions <= 0 all solutions are returned\nuse_notations::Bool=false: Flag to use notations in the model\ndecompose_ANC::Bool=true: When True, if the noaggregatorgroup is ANC and, then the main optimization model is decomposed into two models. See to_least_profitable_coalition_callback for more details\ndecompose_rel_tolerance=0.05: Relative tolerance of the decompose_ANC procedure\ndecompose_abs_tolerance=1e-2: Absolute tolerance of the decompose_ANC procedure\nkwargs...: Additional arguments\n\nReturns\n\niter_mode: TheoryOfGames.IterMode object\n\n\n\n\n\n","category":"method"},{"location":"examples/aggregated_non_cooperative/#Aggregated-Non-Cooperative-Energy-Community","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"","category":"section"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"This example is taken from the article Optimal sizing of energy communities with fair revenue sharing and exit clauses: Value, role and business model of aggregators and users by Davide Fioriti et al, url but for a subset of users","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"The energy community considered in this example consists of 3 users, where:","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"all users can install PV system\nonly the first user cannot install batteries, whereas the others can\nthe third user can install also wind turbines","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Import the needed packages","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"using EnergyCommunity, JuMP\nusing HiGHS, Plots, FileIO","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Create a base Energy Community example in the data folder; use the default configuration.","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"folder = joinpath(@__DIR__, \"data\")\ncreate_example_data(folder, config_name=\"default\")","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Input file to load the structure of the energy community based on a yaml file.","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"input_file = joinpath(@__DIR__, \"data/energy_community_model.yml\");\nnothing #hide","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Output path of the summary and of the plots","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"output_file_isolated = joinpath(@__DIR__, \"./results/output_file_ANC.xlsx\");\noutput_plot_isolated = joinpath(@__DIR__, \"./results/Img/plot_user_{:s}_ANC.png\");\nnothing #hide","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"define optimizer and options","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"optimizer = optimizer_with_attributes(HiGHS.Optimizer, \"ipm_optimality_tolerance\"=>1e-6)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Define the Non Cooperative model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"ANC_Model = ModelEC(input_file, EnergyCommunity.GroupANC(), optimizer)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Build the mathematical model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"build_model!(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Optimize the model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"optimize!(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"get objective value","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"objective_value(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Create plots of the results","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"plot(ANC_Model, output_plot_isolated)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Print summaries of the results","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"print_summary(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Save summaries","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"save_summary(ANC_Model, output_file_isolated)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Plot the sankey plot of resources","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"plot_sankey(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"DataFrame of the business plan","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"business_plan(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"plot business plan","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"business_plan_plot(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"save the model to a jld2 file","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"save(\"anc_model.jld2\", ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"read the loaded model from the jld2 file","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"ANC_Model_loaded = load!(\"anc_model.jld2\", ModelEC())","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"get the objective value of the loaded model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"objective_value(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"This page was generated using Literate.jl.","category":"page"},{"location":"configuration/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"To customize a EnergyCommunity.jl model, the main interface to represent a Energy Community system is by editing a configuration file using yaml format. For reference, the default sample configuration file is provided in the examples and easily installable by running the following command:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"julia> using EnergyCommunity\n\njulia> create_example_data(\".\", config_name=\"default\")","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"This code creates a folder named data in the current directory with the following files:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"energy_community_model.yaml: a sample configuration file for a Energy Community system.\nmarket_data.csv: a csv file with quantities related to the market prices, such as time-varying electricity prices and more.\ninput_resource.csv: a csv file with data related to the demand by each user and specific renewable production by time step of the simulation.\nenergy_community_model_thermal.yaml: another sample configuration file for a Energy Community that contains also dispatchable fuel-fired generators.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"To delve and explore the modelling of Energy Communities with EnergyCommunity.jl, we will use the energy_community_model.yaml file as a reference and better detailed in the following.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#What-is-EnergyCommunity.jl?","page":"Introduction","title":"What is EnergyCommunity.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"EnergyCommunity is a package for the optimal design and dispatch of Energy Communities at different level of aggregation. Provided easy to read configuration files, EnergyCommunity.jl creates a mathematical optimization model using JuMP.jl and solves it using any optimization solver compatible with JuMP.jl. The JuMP mathematical model is also editable and customized.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"EnergyCommunity.jl automatically builds a Mixed-Integer Linear Programming model that represents the optimal dispatch and design of an Energy Community. To see a simple example of the model, see the example section","category":"page"},{"location":"#Resources-for-getting-started","page":"Introduction","title":"Resources for getting started","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Please, check out the examples in the example section and the files available in the example folder of the github repository.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To learn more about the Julia framework, please check out this simple introduction or more material in julialang.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For more material on the backbone optimization framework, please refer to documentation of JuMP.jl. JuMP is a domain-specific modeling language that allows mathematical optimization embedded in Julia.","category":"page"}]
}
