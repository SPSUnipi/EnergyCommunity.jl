var documenterSearchIndex = {"docs":
[{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"EditURL = \"non_cooperative.jl\"","category":"page"},{"location":"examples/non_cooperative/#Non-Cooperative-Energy-Community","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"","category":"section"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"This example is taken from the article Optimal sizing of energy communities with fair revenue sharing and exit clauses: Value, role and business model of aggregators and users by Davide Fioriti et al, url but for a subset of users","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"The energy community considered in this example consists of 3 users, where:","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"all users can install PV system\nonly the first user cannot install batteries, whereas the others can\nthe third user can install also wind turbines","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Import the needed packages","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"using EnergyCommunity, JuMP\nusing HiGHS, Plots, FileIO","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Create a base Energy Community example in the data folder; use the default configuration.","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"folder = joinpath(@__DIR__, \"data\")\ncreate_example_data(folder, config_name=\"default\")","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Input file to load the structure of the energy community based on a yaml file.","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"input_file = joinpath(@__DIR__, \"data/energy_community_model.yml\");\nnothing #hide","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Output path of the summary and of the plots","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"output_file_isolated = joinpath(@__DIR__, \"./results/output_file_NC.xlsx\");\noutput_plot_isolated = joinpath(@__DIR__, \"./results/Img/plot_user_{:s}_NC.png\");\nnothing #hide","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"define optimizer and options","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"optimizer = optimizer_with_attributes(HiGHS.Optimizer, \"ipm_optimality_tolerance\"=>1e-6)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Define the Non Cooperative model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"NC_Model = ModelEC(input_file, EnergyCommunity.GroupNC(), optimizer)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Build the mathematical model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"build_model!(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Optimize the model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"optimize!(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"get objective value","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"objective_value(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Create plots of the results","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"plot(NC_Model, output_plot_isolated)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Print summaries of the results","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"print_summary(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Save summaries","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"save_summary(NC_Model, output_file_isolated)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"Plot the sankey plot of resources","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"plot_sankey(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"DataFrame of the business plan","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"business_plan(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"plot business plan","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"business_plan_plot(NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"save the model to a jld2 file","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"save(\"nc_model.jld2\", NC_Model)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"read the loaded model from the jld2 file","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"NC_Model_loaded = load!(\"nc_model.jld2\", ModelEC())","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"get the objective value of the loaded model","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"objective_value(NC_Model_loaded)","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"","category":"page"},{"location":"examples/non_cooperative/","page":"Non Cooperative Energy Community","title":"Non Cooperative Energy Community","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"EditURL = \"cooperative.jl\"","category":"page"},{"location":"examples/cooperative/#Cooperative-Energy-Community","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"","category":"section"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"This example is taken from the article Optimal sizing of energy communities with fair revenue sharing and exit clauses: Value, role and business model of aggregators and users by Davide Fioriti et al, url but for a subset of users","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"The energy community considered in this example consists of 3 users, where:","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"all users can install PV system\nonly the first user cannot install batteries, whereas the others can\nthe third user can install also wind turbines","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Import the needed packages","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"using EnergyCommunity, JuMP\nusing HiGHS, Plots, FileIO","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Create a base Energy Community example in the data folder; use the default configuration.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"folder = joinpath(@__DIR__, \"data\")\ncreate_example_data(folder, config_name=\"default\")","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Input file to load the structure of the energy community based on a yaml file.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"input_file = joinpath(@__DIR__, \"data/energy_community_model.yml\");\nnothing #hide","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Output path of the summary and of the plots","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"output_file_isolated = joinpath(@__DIR__, \"./results/output_file_CO.xlsx\");\noutput_plot_isolated = joinpath(@__DIR__, \"./results/Img/plot_user_{:s}_CO.png\");\nnothing #hide","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"define optimizer and options","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"optimizer = optimizer_with_attributes(HiGHS.Optimizer, \"ipm_optimality_tolerance\"=>1e-6)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Define the Non Cooperative model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"CO_Model = ModelEC(input_file, EnergyCommunity.GroupCO(), optimizer)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Build the mathematical model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"build_model!(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Optimize the model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"optimize!(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"get objective value","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"objective_value(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Create plots of the results","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"plot(CO_Model, output_plot_isolated)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Print summaries of the results","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"print_summary(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Save summaries","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"save_summary(CO_Model, output_file_isolated)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"Plot the sankey plot of resources","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"plot_sankey(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"DataFrame of the business plan","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"business_plan(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"plot business plan","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"business_plan_plot(CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"save the model to a jld2 file","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"save(\"co_model.jld2\", CO_Model)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"read the loaded model from the jld2 file","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"CO_Model_loaded = load!(\"co_model.jld2\", ModelEC())","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"get the objective value of the loaded model","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"objective_value(CO_Model_loaded)","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"","category":"page"},{"location":"examples/cooperative/","page":"Cooperative Energy Community","title":"Cooperative Energy Community","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Example","page":"Manual","title":"Example","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"using JuMP, BilevelJuMP, Cbc\n\nmodel = BilevelModel(Cbc.Optimizer, mode = BilevelJuMP.SOS1Mode())\n\n@variable(Lower(model), x)\n@variable(Upper(model), y)\n\n@objective(Upper(model), Min, 3x + y)\n@constraints(Upper(model), begin\n    x <= 5\n    y <= 8\n    y >= 0\nend)\n\n@objective(Lower(model), Min, -x)\n@constraints(Lower(model), begin\n     x +  y <= 8\n    4x +  y >= 8\n    2x +  y <= 13\n    2x - 7y <= 0\nend)\n\noptimize!(model)\n\nobjective_value(model) # = 3 * (3.5 * 8/15) + 8/15 # = 6.13...\nvalue(x) # = 3.5 * 8/15 # = 1.86...\nvalue(y) # = 8/15 # = 0.53...","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The option BilevelJuMP.SOS1Mode() indicates that the solution method used will be a KKT reformulation emplying SOS1 to model complementarity constraints and solve the problem with MIP solvers (Cbc, Xpress, Gurobi, CPLEX, SCIP).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Alternatively, the option BilevelJuMP.IndicatorMode() is almost equivalent to the previous. The main difference is that it relies on Indicator constraints instead. This kind of constraints is available in some MIP solvers.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"A third and classic option it the BilevelJuMP.FortunyAmatMcCarlMode(), which relies on the Fortuny-Amat and McCarl big-M method that requires a MIP solver with very basic functionality, i.e., just binary variables are needed. The main drawback of this method is that one must provide bounds for all primal and dual variables. However, if the bounds are good, this method can be more efficient than the previous. Bound hints to compute the big-Ms can be passed with the methods: set_primal_(upper\\lower)_bound_hint(variable, bound), for primals; and set_dual_(upper\\lower)_bound_hint(constraint, bound) for duals. We can also call FortunyAmatMcCarlMode(primal_big_M = vp, dual_big_M = vd), where vp and vd are, repspectively, the big M fallback values for primal and dual variables, these are used when some variables have no given bounds, otherwise the given bounds are used instead.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Another option is BilevelJuMP.ProductMode() that reformulates the complementarity constraints as products so that the problem can be solved by NLP (Ipopt, KNITRO) solvers or even MIP solvers with the aid of binary expansions (see QuadraticToBinary.jl). Note that binary expansions require variables to have upper and lower bounds.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Finally, one can use BilevelJuMP.MixedMode(default = mode) where mode is one of the other modes described above. With this method it is possible to set complementarity reformulations per constraint with BilevelJuMP.set_mode(ctr, mode).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"An alternative to complementarity constraint reformulation is the Strong Duality reformulation which add the constraint enforcing primal dual equality. The option is BilevelJuMP.StrongDualityMode(eps) where eps is the tolance on the enforcing constraint.","category":"page"},{"location":"manual/#Note-on-[QuadraticToBinary.jl](https://github.com/joaquimg/QuadraticToBinary.jl)","page":"Manual","title":"Note on QuadraticToBinary.jl","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"QuadraticToBinary.jl is a package that converts quadratic terms in constraints and objective. To do so the pack acts like a solver on top of the real solver and most data is forwarded directly to the solver itself. For many solvers it is enough to use:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SOLVER = Xpress.Optimizer()\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(SOLVER)\nBilevelModel(Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"However, this might lead to some solver not supporting certain functionality like Cbc. In this case we need to:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"SOLVER = Cbc.Optimizer()\nCACHED_SOLVER = MOI.Utilities.CachingOptimizer(\n    MOI.Utilities.UniversalFallback(MOI.Utilities.Model{Float64}()), SOLVER)\nQ_SOLVER = QuadraticToBinary.Optimizer{Float64}(CACHED_SOLVER)\nBilevelModel(()->Q_SOLVER, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Note that we used ()->Q_SOLVER instead of just Q_SOLVER because BilevelModel requires as constructor and not an instance of an object.","category":"page"},{"location":"manual/#Advanced-Features","page":"Manual","title":"Advanced Features","text":"","category":"section"},{"location":"manual/#Lower-level-dual-variables","page":"Manual","title":"Lower level dual variables","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Suppose you have a constraint b in the lower level:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@constraint(Lower(model), b, ...)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It is possible to access the dual variable of b to use it in the upper level:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@variable(Upper(model), lambda, DualOf(b))","category":"page"},{"location":"manual/#Conic-lower-level","page":"Manual","title":"Conic lower level","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"BilevelJuMP allows users to write conic models in the lower level. However, solving this kind of problems is much harder and requires complex solution methods. Mosek's Conic MIP can be used with the aid of QuadraticToBinary.jl.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It is also possible to solve Second Order Cone constrained models with Ipopt. In this case we need to add a special, non-standard bridge, to Ipopt as follows:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"IPO_OPT = Ipopt.Optimizer(print_level=0)\nIPO = MOI.Bridges.Constraint.SOCtoNonConvexQuad{Float64}(IPO_OPT)\nBilevelModel(()->IPO, mode = BilevelJuMP.ProductMode(1e-5))","category":"page"},{"location":"installation/#Installation-guide","page":"Installation guide","title":"Installation guide","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"This guide explains how to install EnergyCommunity.jl and its dependencies.","category":"page"},{"location":"installation/#Install-Julia","page":"Installation guide","title":"Install Julia","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"EnergyCommunity.jl is a Julia package. To use it, you need to install Julia. You can download Julia from the official website.","category":"page"},{"location":"installation/#Install-EnergyCommunity.jl","page":"Installation guide","title":"Install EnergyCommunity.jl","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"To install EnergyCommunity.jl, you can use the Julia package manager. Open Julia and run the following commands:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> import Pkg\n\njulia> Pkg.add(\"EnergyCommunity\")","category":"page"},{"location":"installation/#Install-a-solver","page":"Installation guide","title":"Install a solver","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"EnergyCommunity.jl requires an optimization solver to solve the optimization problem. You can use any optimization solver compatible with JuMP.jl. For example, you can use the open-source solver HiGHS. To install HiGHS, run the following command:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> Pkg.add(\"HiGHS\")","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"It is recommended to use a solver capable of Mixed-Integer Linear Programming. You can find a list of solvers compatible with JuMP.jl here.","category":"page"},{"location":"installation/#Install-input/output-packages","page":"Installation guide","title":"Install input/output packages","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"EnergyCommunity.jl also supports input/output featurs, such as saving/loading a model to disk or plotting results. To install the plotting package Plots.jl, run the following command:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> Pkg.add(\"Plots\")","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"To install FileIO.jl that is used to export the model to disk, run the following command:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"julia> Pkg.add(\"FileIO\")","category":"page"},{"location":"API reference/#API-Reference","page":"API reference","title":"API Reference","text":"","category":"section"},{"location":"API reference/","page":"API reference","title":"API reference","text":"Modules = [EnergyCommunity]\nOrder   = [:function, :type]","category":"page"},{"location":"API reference/#Base.copy-Tuple{ModelEC}","page":"API reference","title":"Base.copy","text":"Copy of ModelEC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#Base.deepcopy-Tuple{ModelEC}","page":"API reference","title":"Base.deepcopy","text":"Deepcopy of ModelEC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#Base.zero-Tuple{ModelEC}","page":"API reference","title":"Base.zero","text":"Function zero to represent the empty ModelEC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._jump_to_dict-Tuple{JuMP.Model}","page":"API reference","title":"EnergyCommunity._jump_to_dict","text":"_jump_to_dict\n\nFunction to turn a JuMP model to a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._print_summary-Tuple{IO, AbstractEC}","page":"API reference","title":"EnergyCommunity._print_summary","text":"_print_summary(io::IO, model::AbstractEC)\n\nPrint a plain-text summary of model to io.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._verify_data-Tuple{Dict}","page":"API reference","title":"EnergyCommunity._verify_data","text":"Function to verify the data loaded from the disk\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity._verify_users_data-Tuple{Dict}","page":"API reference","title":"EnergyCommunity._verify_users_data","text":"Function to verify the users data loaded from the disk\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_EC_economics_summary!-Tuple{Vector{T} where T, AbstractEC}","page":"API reference","title":"EnergyCommunity.add_EC_economics_summary!","text":"Function to create the output dataframe of the economics of the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_EC_peak_summary!-Tuple{Vector{T} where T, AbstractEC}","page":"API reference","title":"EnergyCommunity.add_EC_peak_summary!","text":"Function to create the output dataframe of peak power for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_branching_priorities!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.add_branching_priorities!","text":"General fallback for branching priorities\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_info_solution_summary!-Tuple{Vector{T} where T, AbstractEC}","page":"API reference","title":"EnergyCommunity.add_info_solution_summary!","text":"Function to create the dataframe to report the status of the optimization\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_notations!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.add_notations!","text":"General fallback for notations\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_users_design_summary!-Tuple{Vector{T} where T, AbstractEC, AbstractVector{T} where T}","page":"API reference","title":"EnergyCommunity.add_users_design_summary!","text":"Function to create the output dataframe of design capacity\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_users_economics_summary!-Tuple{Vector{T} where T, AbstractEC, AbstractVector{T} where T}","page":"API reference","title":"EnergyCommunity.add_users_economics_summary!","text":"Function to create the output dataframe of the users' economics\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.add_users_peak_summary!-Tuple{Vector{T} where T, AbstractEC, AbstractVector{T} where T}","page":"API reference","title":"EnergyCommunity.add_users_peak_summary!","text":"Function to create the output dataframe of peak power\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names-Tuple{Any, ASSET_TYPE}","page":"API reference","title":"EnergyCommunity.asset_names","text":"Function to get the list of the assets for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names-Tuple{Any, Vector{ASSET_TYPE}}","page":"API reference","title":"EnergyCommunity.asset_names","text":"Function to get the list of the assets for a user in a list of elements\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names-Tuple{Any}","page":"API reference","title":"EnergyCommunity.asset_names","text":"Function to get the list of the assets for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_names_ex-Tuple{Any, Vector{ASSET_TYPE}}","page":"API reference","title":"EnergyCommunity.asset_names_ex","text":"Function to get the list of the assets for a user in a list of elements except a list of given types\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.asset_type-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.asset_type","text":"Function to get the asset type of a component\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_model!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.build_base_model!","text":"build_base_model!(ECModel::AbstractEC, optimizer)\n\nCreates the base optimization model for all the EC models\n\nArguments\n\nECModel: EC model object\noptimizer: optimizer object; any optimizer from JuMP\nuse_notations: boolean; if true, the model will be created using the direct mode to create the JuMP model\n\nReturns\n\nIt returns the ECModel object with the base model created\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_utility!-Tuple{AbstractEC, AbstractGroupANC}","page":"API reference","title":"EnergyCommunity.build_base_utility!","text":"buildbaseutility!(ECModel::AbstractEC, base_group::AbstractGroupANC)\n\nWhen in the CO case the ANC model is used as base case, then this function builds the corresponding constraint\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_utility!-Tuple{AbstractEC, AbstractGroupNC}","page":"API reference","title":"EnergyCommunity.build_base_utility!","text":"buildbaseutility!(ECModel::AbstractEC, base_group::AbstractGroupNC)\n\nWhen in the CO case the NC model is used as base case, then this function builds the corresponding constraint\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_base_utility!-Tuple{AbstractEC, Vararg{Any, N} where N}","page":"API reference","title":"EnergyCommunity.build_base_utility!","text":"buildbaseutility!(ECModel::AbstractEC, noaggregatorgroup::AbstractGroupANC)\n\nWhen in the CO case the ANC model is used as reference case for when the aggregator is not in the group, then this function builds the corresponding constraint\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_least_profitable!-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.build_least_profitable!","text":"buildleastprofitable!(ECModel::AbstractEC; noaggregatorgroup::AbstractGroup=GroupNC(), add_EC=true)\n\nFunction to build the model to identify the least profitable coalition\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_model!-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.build_model!","text":"Build the mathematical problem for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_model!-Tuple{AbstractGroup, AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.build_model!","text":"Abstract build function model for generic EnergyCommunity model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_no_agg_utility!-Tuple{AbstractEC, AbstractGroupANC}","page":"API reference","title":"EnergyCommunity.build_no_agg_utility!","text":"buildnoaggutility!(ECModel::AbstractEC, noaggregatorgroup::AbstractGroupANC; basemodel=nothing)\n\nWhen in the CO case the ANC model is used as reference case for when the aggregator is not in the group, then this function builds the corresponding constraint\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_no_agg_utility!-Tuple{AbstractEC, AbstractGroupNC}","page":"API reference","title":"EnergyCommunity.build_no_agg_utility!","text":"buildnoaggutility!(ECModel::AbstractEC, noaggregator_group::AbstractGroupNC; kwargs...)\n\nWhen the NC case is the reference value when no aggregator is available, then no changes in the model are required\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_no_agg_utility!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.build_no_agg_utility!","text":"buildnoaggutility!(ECModel::AbstractEC, noaggregator_group::Any)\n\nNot implemented case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_noagg_least_profitable!-Tuple{ModelEC}","page":"API reference","title":"EnergyCommunity.build_noagg_least_profitable!","text":"buildnoaggleastprofitable(ECModel::ModelEC; usenotations=false, optimizer=nothing)\n\nFunction to create an ecmodel that returns the least profitable coalition for ANC models\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_specific_model!-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.build_specific_model!","text":"Set the ANC-specific model for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_specific_model!-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.build_specific_model!","text":"Set the CO-specific model for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.build_specific_model!-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.build_specific_model!","text":"Set the NC/ANC-specific model for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.business_plan","page":"API reference","title":"EnergyCommunity.business_plan","text":"business_plan(ECModel::AbstractEC, profit_distribution)\n\nFunction to describe the cost term distributions by all users for all years.\n\nParameters\n\nECModel : AbstractEC   EnergyCommunity model\nprofit_distribution   Final objective function\nusersetfinancial   User set to be considered for the financial analysis\n\nReturns\n\nThe output value is a NamedTuple with the following elements\n- df_business\n    Dataframe with the business plan information\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.business_plan_plot-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.business_plan_plot","text":"business_plan_plot(ECModel::AbstractEC, profit_distribution)\n\nFunction to describe the cost term distributions by all users for all years.\n\nParameters\n\nECModel : AbstractEC   EnergyCommunity model\ndf_business   Dataframe with the business plan information\nplot_struct   Plot structure of the business plan\n\nReturns\n\nThe output value is a plot with the business plan information\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_demand-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_demand","text":"calculate_demand(ECModel::AbstractEC)\n\nFunction to calculate the demand by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the demand by user and the whole EC as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_energy_ratios-NTuple{7, Any}","page":"API reference","title":"EnergyCommunity.calculate_energy_ratios","text":"calculate_energy_ratios(users_data, _P_ren_us, user_agg_set, agg_id, time_set, _P_tot_us, _x_us)\n\nCalculate energy ratios '''\n\nOutputs\n\nPV_frac\nPVfractot\nwind_frac\nwindfractot\n\n'''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the energy community and users. Output is normalized with respect to the demand when per_unit is true\n\n''' Outputs –––- grid_frac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the Aggregated Non Cooperative case. Output is normalized with respect to the demand when perunit is true ''' Outputs –––- gridfrac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the Cooperative case. Output is normalized with respect to the demand when perunit is true ''' Outputs –––- gridfrac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_export-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_export","text":"calculate_grid_export(::AbstractGroupNC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid export for the Non-Cooperative case Output is normalized with respect to the demand when per_unit is true\n\n''' Outputs –––- grid_frac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the energy community and users. Output is normalized with respect to the demand when per_unit is true\n\n''' Outputs –––- grid_frac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the Aggregated Non Cooperative case. Output is normalized with respect to the demand when perunit is true ''' Outputs –––- gridfrac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the Cooperative case. Output is normalized with respect to the demand when perunit is true ''' Outputs –––- gridfrac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_import-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_grid_import","text":"calculate_grid_import(::AbstractGroupNC, ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate grid usage for the Non-Cooperative case Output is normalized with respect to the demand when per_unit is true\n\n''' Outputs –––- grid_frac : DenseAxisArray     Reliance on the grid demand for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_ratios_agg-NTuple{5, Any}","page":"API reference","title":"EnergyCommunity.calculate_grid_ratios_agg","text":"calculate_grid_ratios_noagg(users_data, user_agg_set, agg_id, time_set, _P_tot_us_agg)\n\nCalculate energy ratios '''\n\nOutputs\n\ngridfracagg\ngridfractot_agg\n\n'''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_grid_ratios_noagg-NTuple{5, Any}","page":"API reference","title":"EnergyCommunity.calculate_grid_ratios_noagg","text":"calculate_grid_ratios_noagg(users_data, user_agg_set, agg_id, time_set, _P_tot_us_noagg)\n\nCalculate energy ratios '''\n\nOutputs\n\ngridfracnoagg\ngridfractot_noagg\n\n'''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_production","text":"calculate_production(ECModel::AbstractEC)\n\nFunction to calculate the energy production by user\n\nArguments\n\nECModel: EC model object\n\nReturns\n\nIt returns the production by user and the whole EC as a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_production_shares-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_production_shares","text":"calculate_production_shares(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate energy ratio by energy production resource for a generic group Output is normalized with respect to the demand when per_unit is true\n\nArguments\n\nECModel: EC model object\nper_unit: boolean; if true, the output is normalized with respect to the demand\n\nReturns\n\nIt returns a DenseAxisArray describing the share of energy production by  energy resource by user and the entire system, optionally normalized with respect to the demand of the corresponding group, when per_unit is true\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_self_consumption-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_self_consumption","text":"calculate_self_consumption(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the demand that each user meets using its own sources, or self consumption. Output is normalized with respect to the demand when per_unit is true\n\nArguments\n\nECModel: EC model object\nper_unit: boolean; if true, the output is normalized with respect to the demand\n\nReturns\n\nIt returns a DenseAxisArray describing the self consumption for each user and the aggregation, optionally normalized with respect to the demand of the corresponding group, when per_unit is true\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_self_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_self_production","text":"calculate_self_production(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the self production for each user. Output is normalized with respect to the demand when per_unit is true\n\nArguments\n\nECModel: EC model object\nper_unit: boolean; if true, the output is normalized with respect to the demand\n\nReturns\n\nIt returns a DenseAxisArray describing the self production for each user and the aggregation, optionally normalized with respect to the demand of the corresponding group, when per_unit is true\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the demand that each user meets using its own sources or other users. When onlyshared is false, also self consumption is considered, otherwise only shared consumption. Output is normalized with respect to the demand when perunit is true\n\n''' Outputs –––- sharedconsfrac : DenseAxisArray     Shared consumption for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the demand that each user meets using its own sources or other users for the Aggregated Non Cooperative case. In this case, there can be shared energy, non only self consumption. When onlyshared is false, also self consumption is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\n''' Outputs –––- sharedconsfrac : DenseAxisArray     Shared consumption for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the demand that each user meets using its own sources or other users for the Cooperative case. In the Cooperative case, there can be shared energy, non only self consumption. When onlyshared is false, also self consumption is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\n''' Outputs –––- sharedconsfrac : DenseAxisArray     Shared consumption for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_consumption-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_consumption","text":"calculate_shared_consumption(::AbstractGroupNC, ECModel::AbstractEC; kwargs...)\n\nCalculate the demand that each user meets using its own sources or other users for the Non-Cooperative case. In the Non-Cooperative case, there is no shared energy, only self consumption. Shared energy means energy that is shared between  Output is normalized with respect to the demand when per_unit is true\n\n''' Outputs –––- sharedconsfrac : DenseAxisArray     Shared consumption for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_energy_abs_agg-NTuple{5, Any}","page":"API reference","title":"EnergyCommunity.calculate_shared_energy_abs_agg","text":"calculate_shared_energy_abs_agg(users_data, user_set, time_set,\n    _P_ren_us, _P_tot_us, shared_en_frac, shared_cons_frac)\n\nCalculate the absolute shared produced energy (en), the shared consumption (cons) and self consumption (self cons) '''\n\nOutputs\n\nsharedenfracusagg\nsharedentotfracagg\nsharedconsfracusagg\nsharedconstotfracagg\nselfconsfracusagg\nselfconstotfracagg\n\n'''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_energy_agg-NTuple{6, Any}","page":"API reference","title":"EnergyCommunity.calculate_shared_energy_agg","text":"calculate_shared_energy(users_data, user_agg_set, agg_id, time_set,\n    _P_ren_us, _P_tot_us, shared_en_frac, shared_cons_frac)\n\nCalculate the shared produced energy (en) and the shared consumption (cons) ratios '''\n\nOutputs\n\nsharedenfracusagg\nsharedentotfracagg\nsharedconsfracusagg\nsharedconstotfracagg\n\n'''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(ECModel::AbstractEC; per_unit::Bool=true)\n\nCalculate the energy that each user produces and uses in its own POD or it is commercially consumed within the EC, when creaded. When onlyshared is false, also self production is considered, otherwise only shared energy. Output is normalized with respect to the demand when perunit is true\n\n''' Outputs –––- sharedconsfrac : DenseAxisArray     Shared consumption for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(::AbstractGroupANC, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the shared produced energy for the Aggregated Non Cooperative case. In this case, there can be shared energy between users, not only self production. When onlyshared is false, also self production is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\n''' Outputs –––- sharedenfrac : DenseAxisArray     Shared energy for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(::AbstractGroupCO, ECModel::AbstractEC; per_unit::Bool=true, only_shared::Bool=false)\n\nCalculate the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production. When onlyshared is false, also self production is considered, otherwise only shared energy. Shared energy means energy that is shared between  Output is normalized with respect to the demand when perunit is true\n\n''' Outputs –––- sharedenfrac : DenseAxisArray     Shared energy for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_shared_production-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_shared_production","text":"calculate_shared_production(::AbstractGroupNC, ECModel::AbstractEC; kwargs...)\n\nCalculate the shared produced energy for the Non-Cooperative case. In the Non-Cooperative case, there is no shared energy between users, only self production. Output is normalized with respect to the demand when per_unit is true\n\n''' Outputs –––- sharedenfrac : DenseAxisArray     Shared energy for each user and the aggregation '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(ECModel::AbstractEC)\n\nCalculate the time series of the shared consumed energy for the Energy Community.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\n''' Outputs –––- sharedconsus : DenseAxisArray     Shared consumption for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(::AbstractGroupANC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared consumed energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\n''' Outputs –––- sharedconsus : DenseAxisArray     Shared consumption for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(::AbstractGroupCO, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared consumed energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\n''' Outputs –––- sharedconsus : DenseAxisArray     Shared consumption for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_consumption-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_consumption","text":"calculate_time_shared_consumption(::AbstractGroupNC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared consumed energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of load that is met by using shared energy.\n\n''' Outputs –––- sharedconsus : DenseAxisArray     Shared consumption for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(ECModel::AbstractEC; kwargs...)\n\nCalculate the time series of the shared consumed energy for the Energy Community.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\n''' Outputs –––- sharedprodus : DenseAxisArray     Shared production for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(::AbstractGroupANC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\n''' Outputs –––- sharedprodus : DenseAxisArray     Shared production for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(::AbstractGroupCO, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\n''' Outputs –––- sharedprodus : DenseAxisArray     Shared production for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.calculate_time_shared_production-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.calculate_time_shared_production","text":"calculate_time_shared_production(::AbstractGroupNC, ECModel::AbstractEC; add_EC=true, kwargs...)\n\nCalculate the time series of the shared produced energy for the Cooperative case. In the Cooperative case, there can be shared energy between users, not only self production.\n\nFor every time step and user, this time series highlight the quantity of production that meets needs by other users.\n\n''' Outputs –––- sharedprodus : DenseAxisArray     Shared production for each user and the aggregation and time step '''\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.check_valid_data_dict-Tuple{Dict}","page":"API reference","title":"EnergyCommunity.check_valid_data_dict","text":"Check whether the dictionary data has the needed components\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.component-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.component","text":"Function to get the components value of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.components-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.components","text":"Function to get the components list of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.create_example_data-Tuple{Any}","page":"API reference","title":"EnergyCommunity.create_example_data","text":"create_example_data(parent_folder, config_name::String = \"default\")\n\nCreate an example data for the Energy Community model. This function creates in the specified folder the necessary data to run the Energy Community model, based on the specified configuration name.\n\nParameters\n\nparent_folder : AbstractString   Parent folder where the example data will be created\nconfig_name : String   Configuration name to be used to create the example data   Supported values: \"default\"\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.create_output_data-Tuple{ModelEC, Any}","page":"API reference","title":"EnergyCommunity.create_output_data","text":"Function to create output data after the optimization for TheoryOfGames.jl\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.data_sankey-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.data_sankey","text":"plot_sankey(ECModel::AbstractEC)\n\nFunction to create the input data for plotting any Sankey diagram representing the energy flows across the energy community\n\nInputs\n\nECModel : AbstractEC     Energy Community model name_units : (optional) Vector     Labels used for the sankey diagram with the following order:     \"Market buy\", [users labels], \"Community\", \"Market sell\", [users labels]\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.device_names-Tuple{Any}","page":"API reference","title":"EnergyCommunity.device_names","text":"Function to get the list of devices for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.explode_data-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.explode_data","text":"Return main data elements of the dataset of the ECModel: general parameters, users data and market data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.explode_data-Tuple{Any}","page":"API reference","title":"EnergyCommunity.explode_data","text":"Return main data elements of the dataset: general parameters, users data and market data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.field","page":"API reference","title":"EnergyCommunity.field","text":"Function get field that throws an error if the field is not found\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.field_component-NTuple{4, Any}","page":"API reference","title":"EnergyCommunity.field_component","text":"Function to get the components value of a dictionary, with default value\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.field_component-Tuple{Any, Any, Any}","page":"API reference","title":"EnergyCommunity.field_component","text":"Function to get the components value of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.field_d","page":"API reference","title":"EnergyCommunity.field_d","text":"Function to safely get a field of a dictionary with default value\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.finalize_results!-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.finalize_results!","text":"finalize_results!(::AbstractGroupANC, ECModel::AbstractEC)\n\nFunction to finalize the results of the Aggregated Non Cooperative model after the execution\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.finalize_results!-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.finalize_results!","text":"finalize_results!(::AbstractGroupCO, ECModel::AbstractEC)\n\nFunction to finalize the results of the Cooperative model after the execution Nothing to do\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.finalize_results!-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.finalize_results!","text":"finalize_results!(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction to finalize the results of the Non Cooperative model after the execution Many of the variables are set to zero due to the absence of cooperation between users\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.general-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.general","text":"Function to get the general parameters\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.generator_names-Tuple{Any}","page":"API reference","title":"EnergyCommunity.generator_names","text":"Function to get the list of generators for a user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_annotations-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.get_annotations","text":"Get annotations for Benders decomposition\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_group_type-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.get_group_type","text":"Get the EC group type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_subproblem_vars_by_user-Union{Tuple{T}, Tuple{JuMP.Containers.DenseAxisArray{T, N, Ax, L} where {N, Ax, L<:Tuple{Vararg{JuMP.Containers._AxisLookup, N}}}, Any}} where T<:JuMP.VariableRef","page":"API reference","title":"EnergyCommunity.get_subproblem_vars_by_user","text":"Get variables related to the user u_name for a DenseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_subproblem_vars_by_user-Union{Tuple{T}, Tuple{JuMP.Containers.SparseAxisArray{T, N, K} where {N, K<:Tuple{Vararg{Any, N}}}, Any}} where T<:JuMP.VariableRef","page":"API reference","title":"EnergyCommunity.get_subproblem_vars_by_user","text":"Get variables related to the user u_name for a SparseAxisArray\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.get_user_set-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.get_user_set","text":"Get the EC user set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_any_asset","page":"API reference","title":"EnergyCommunity.has_any_asset","text":"Function to check whether an user has any asset\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.has_asset-Tuple{Any, ASSET_TYPE}","page":"API reference","title":"EnergyCommunity.has_asset","text":"Function to check whether an user has an asset type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_asset-Tuple{Any, AbstractString}","page":"API reference","title":"EnergyCommunity.has_asset","text":"Function to check whether an user has an asset given its name\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_component-Tuple{Any, Any, Any}","page":"API reference","title":"EnergyCommunity.has_component","text":"Function to know if a dictionary has a particular component\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.has_type-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.has_type","text":"Auxiliary function to check if the key 'type' is available in the dictionary d, otherwise false\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.load!-Tuple{AbstractString, AbstractEC}","page":"API reference","title":"EnergyCommunity.load!","text":"load!(output_file::AbstractString, ECModel::AbstractEC)\n\nFunction to save the results and the model to the hard drive\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.market-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.market","text":"Function to get the market configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.market_profile_by_user-Tuple{AbstractEC, Any, Any}","page":"API reference","title":"EnergyCommunity.market_profile_by_user","text":"market_profile_by_user(ECModel::AbstractEC, u_name, profile_name)\n\nFunction to retrieve the market profile of each user, according to their market type (e.g. commercial, domestic, etc.)\n\nArguments\n\nECModel: EC model object\nu_name: user name\nprofile_name: profile name\n\nReturns\n\nIt returns the vector of data corresponding to the profile of the user according to the market type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.name-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.name","text":"name(model::AbstractEC)\n\nReturn the name of the model.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.name-Tuple{ModelEC}","page":"API reference","title":"EnergyCommunity.name","text":"name(model::ModelEC)\n\nReturn the name of the model.\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by User\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by user in the Aggregated Non Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by user in the NonCooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.objective_by_user-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.objective_by_user","text":"Function to return the objective function by user in the NonCooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.output_results-Tuple{AbstractEC, AbstractString, AbstractString, GroupCO}","page":"API reference","title":"EnergyCommunity.output_results","text":"Output results for the EC configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.output_results-Tuple{AbstractEC, AbstractString, AbstractString, Union{GroupANC, GroupNC}}","page":"API reference","title":"EnergyCommunity.output_results","text":"Output results for the NC configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-NTuple{4, Any}","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to throw error for unformatted data\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Tuple{Any, Any, Any, AbstractString}","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a string value of a profile to load the corresponding dataframe\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Tuple{Any, Any, Any, Dict}","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a personalized processing to generate the data When profile_value is a dictionary, then the user is asking a custom processing of data by a function\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Union{Tuple{T}, Tuple{Any, Any, Any, AbstractVector{T}}} where T<:Real","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a string value of a profile to load the corresponding dataframe\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_dataprofile-Union{Tuple{T}, Tuple{Any, Any, Any, T}} where T<:Real","page":"API reference","title":"EnergyCommunity.parse_dataprofile","text":"Function to parse a string value of a profile to load the corresponding dataframe\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.parse_peak_quantity_by_time_vectors-NTuple{5, Any}","page":"API reference","title":"EnergyCommunity.parse_peak_quantity_by_time_vectors","text":"Function to parse the peak power categories and tariff\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.plot_sankey-Tuple{AbstractEC, Dict}","page":"API reference","title":"EnergyCommunity.plot_sankey","text":"plot_sankey(ECModel::AbstractEC, sank_data::Dict)\n\nFunction to plot the Sankey diagram representing the energy flows across the energy community. This function can be used to plot the sankey diagram of already processed data sank_data.\n\nInputs\n\nECModel : AbstractEC     Energy Community model name_units : (optional) Vector     Labels used for the sankey diagram with the following order:     \"Market buy\", [users labels], \"Community\", \"Market sell\", [users labels]\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.plot_sankey-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.plot_sankey","text":"plot_sankey(ECModel::AbstractEC)\n\nFunction to plot the Sankey diagram representing the energy flows across the energy community\n\nInputs\n\nECModel : AbstractEC     Energy Community model name_units : (optional) Vector     Labels used for the sankey diagram with the following order:     \"Market buy\", [users labels], \"Community\", \"Market sell\", [users labels]\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.prepare_summary-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.prepare_summary","text":"prepare_summary(::AbstractGroupANC, ECModel::AbstractEC;\n    user_set::Vector=Vector())\n\nSave base excel file with a summary of the results for the Aggregated Non Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.prepare_summary-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.prepare_summary","text":"prepare_summary(::AbstractGroupCO, ECModel::AbstractEC;\n    user_set::Vector=Vector())\n\nSave base excel file with a summary of the results for the Cooperative case\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.prepare_summary-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.prepare_summary","text":"prepare_summary(::AbstractGroupNC, ECModel::AbstractEC, file_summary_path::AbstractString;\n    user_set::Vector=Vector())\n\nPrepare the dataframe lists to be saved in an excel file\n\nOutputs\n\noutput_list: Vector{Pair{String, DataFrame}}     Vector of pairs representing the sheets of the Excel file and the corresponding data to save\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"Function to print a summary of the results of the model. The function dispatches the execution to the appropriate function depending on the Aggregation type of the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(::AbstractGroupANC, ECModel::AbstractEC)\n\nFunction to print the main results of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(::AbstractGroupCO, ECModel::AbstractEC)\n\nFunction to print the main results of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.print_summary-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.print_summary","text":"print_summary(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction to print the main results of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.profile-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.profile","text":"Function to get a specific profile\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.profile_component-Tuple{Any, Any, Any}","page":"API reference","title":"EnergyCommunity.profile_component","text":"Function to get a specific profile\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.profiles-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.profiles","text":"Function to get the profile dictionary\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.read_input-Tuple{AbstractString}","page":"API reference","title":"EnergyCommunity.read_input","text":"Function to read the input of the optimization model described as a yaml file\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.reset_user_set!-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.reset_user_set!","text":"Set the EC user set equal to the stored user_set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.save_summary-Tuple{AbstractEC, AbstractString}","page":"API reference","title":"EnergyCommunity.save_summary","text":"Function to save a summary of the results of the model. The function dispatches the execution to the appropriate function depending on the Aggregation type of the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_group_type!-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.set_group_type!","text":"Set the EC group type\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_least_profitable_profit!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.set_least_profitable_profit!","text":"setleastprofitableprofit!(ECModel::AbstractEC, profitdistribution)\n\nFunction to set the profit distribution of the least profitable problem\n\nParameters\n\nECModel : ModelEC     Model of the community profit_distribution : AbstractDict     Profit distribution per user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_objective!-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.set_objective!","text":"Function to set the objective function of the model of the Aggregated-Non-Cooperative model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_objective!-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.set_objective!","text":"Set the objective for the cooperative approach\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_objective!-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.set_objective!","text":"Function to set the objective function of the model of the Non-Cooperative model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.set_user_set!-Tuple{AbstractEC, Any}","page":"API reference","title":"EnergyCommunity.set_user_set!","text":"Set the EC user set\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.split_financial_terms","page":"API reference","title":"EnergyCommunity.split_financial_terms","text":"split_financial_terms(ECModel::AbstractEC, profit_distribution)\n\nFunction to describe the cost term distributions by all users.\n\nParameters\n\nECModel : AbstractEC   EnergyCommunity model\nprofit_distribution   Final objective function\n\nReturns\n\nThe output value is a NamedTuple with the following elements\n- NPV: the NPV of each user given the final profit_distribution adjustment\nby game theory techniques\n- CAPEX: the annualized CAPEX\n- OPEX: the annualized operating costs (yearly maintenance and yearly peak and energy grid charges)\n- REP: the annualized replacement costs\n- RV: the annualized recovery charges\n- REWARD: the annualized reward distribution by user\n- PEAK: the annualized peak costs\n- EN_SELL: the annualized revenues from energy sales\n- EN_BUY: the annualized costs from energy consumption and buying\n- EN_NET: the annualized net energy costs\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.split_yearly_financial_terms","page":"API reference","title":"EnergyCommunity.split_yearly_financial_terms","text":"splityearlyfinancialterms(ECModel::AbstractEC, profitdistribution)\n\nFunction to describe the cost term distributions by all users for all years.\n\nParameters\n\nECModel : AbstractEC   EnergyCommunity model\nprofit_distribution   Final objective function\nusersetfinancial   User set to be considered for the financial analysis\n\nReturns\n\nThe output value is a NamedTuple with the following elements\n- NPV: the NPV of each user given the final profit_distribution adjustment by game theory techniques\n- CAPEX: the annualized CAPEX\n- OPEX: the annualized operating costs (yearly maintenance and yearly peak and energy grid charges)\n- REP: the annualized replacement costs\n- RV: the annualized recovery charges\n- REWARD: the annualized reward distribution by user\n- PEAK: the annualized peak costs\n- EN_SELL: the annualized revenues from energy sales\n- EN_BUY: the annualized costs from energy consumption and buying\n- EN_NET: the annualized net energy costs\n\n\n\n\n\n","category":"function"},{"location":"API reference/#EnergyCommunity.to_least_profitable_coalition_callback-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.to_least_profitable_coalition_callback","text":"to_least_profitable_coalition_callback(ECModel::AbstractEC, base_group::AbstractGroup=GroupNC(); no_aggregator_group::AbstractGroup=GroupNC())\n\nFunction that returns a callback function that, given as input a profit distribution scheme, returns the coalition that has the least benefit in remaining in the grand coalition. The returned function leastprofitablecoalition_callback accepts an AbstractDict as argument that specifies the profit distribution by user that is used to compute the least benefit procedure.\n\nParameters\n\nECModel : AbstractEC     Cooperative EC Model of the EC to study.     When the model is not cooperative an error is thrown. basegroup : AbstractGroup (optional, default GroupNC())     Base group with respect the benefit is calculated. noaggregatorgroup : AbstractGroup (optional, default GroupNC())     Type of aggregation group of the community when no aggregator is available     When not provided, an equivalent NonCooperative model is created and the corresponding     utilities by user are used as reference case. numberofsolutions : (optional, default 1)     Number of solutions to be returned at every iteration     numberofsolutions <= 0: all solutions are returned     numberofsolutions >= 1: specific number of solutions are returned relaxcombinatorial : (optional, default false)     When true, the full least profitable coalition MILP problem is relaxed to continuous,     in the combinatorial part directmodel : (optional, default false)     When true the JuMP model is direct callbacksolution : Dict (optional, default empty)     Dictionary of callbacks depending on the termination status of the optimization.     Keys shall be of type JuMP.TerminationStatusCode, and outputs a function with as argument a ModelEC branchingpriorities : Bool (optional, default true)      Option to specify if add the branching priorities decomposeANC : Bool (optional, default false)     When True, if the noaggregatorgroup is ANC and, then the main optimization model is decomposed     into two models: (a) when no Aggregator is in the coalition and (b) when the aggregator is in the coalition     In this case, (a) is optimized first and if the optimization is beyond a given threshold,     the execution is terminated without optimizing (b). The threshold is provided as an optional input     in the callback function returned by the function. Otherwise the optimization continues with (b). decomposereltolerance : Float     Relative tolerance of the decomposeANC procedure that compares the stopping criterion with the current result decomposeabstolerance : Float     Absolute tolerance of the decomposeANC procedure that compares the stopping criterion with the current result\n\nReturn\n\nleastprofitablecoalition_callback : Function     Function that accepts as input an AbstractDict representing the benefit distribution     by user\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for any model\n\nParameters\n\nECModel : AbstractEC     Cooperative EC Model of the EC to study.     When the model is not cooperative an error is thrown.\n\nReturn\n\nobjectivecallbackby_subgroup : Function     Function that accepts as input an AbstractVector (or Set) of users and returns     as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractGroupANC, AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(::AbstractGroupANC, ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for Aggregated Non Cooperative models\n\nParameters\n\nECModel : AbstractEC     Cooperative EC Model of the EC to study.     When the model is not cooperative an error is thrown. base_model : AbstractEC optional     When provided, it represents the base model used to perform the calculations\n\nReturn\n\nobjectivecallbackby_subgroup : Function     Function that accepts as input an AbstractVector (or Set) of users and returns     as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractGroupCO, AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(::AbstractGroupCO, ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for Aggregated Cooperative models\n\nParameters\n\nECModel : AbstractEC     Cooperative EC Model of the EC to study.     When the model is not cooperative an error is thrown. noaggregatorgroup : AbstractGroup (otional, default NonCooperative)     EC group type when no aggregator is considered\n\nReturn\n\nobjectivecallbackby_subgroup : Function     Function that accepts as input an AbstractVector (or Set) of users and returns     as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_objective_callback_by_subgroup-Tuple{AbstractGroupNC, AbstractEC}","page":"API reference","title":"EnergyCommunity.to_objective_callback_by_subgroup","text":"to_objective_callback_by_subgroup(::AbstractGroupNC, ECModel::AbstractEC)\n\nFunction that returns a callback function that quantifies the objective of a given subgroup of users The returned function objective_func accepts as arguments an AbstractVector of users and returns the objective of the aggregation for Non Cooperative models\n\nParameters\n\nECModel : AbstractEC     Cooperative EC Model of the EC to study.     When the model is not cooperative an error is thrown.\n\nReturn\n\nobjectivecallbackby_subgroup : Function     Function that accepts as input an AbstractVector (or Set) of users and returns     as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.to_utility_callback_by_subgroup-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"EnergyCommunity.to_utility_callback_by_subgroup","text":"to_utility_callback_by_subgroup(ECModel::AbstractEC, base_group_type::AbstractGroup)\n\nFunction that returns a callback function that quantifies the benefit of a given subgroup of users The returned function utility_func accepts as arguments an AbstractVector of users and returns the benefit with respect to the base case of the users optimized independently\n\nParameters\n\nECModel : AbstractEC     Cooperative EC Model of the EC to study.     When the model is not cooperative an error is thrown. basegrouptype : AbstractGroup     Type of the base case to consider noaggregatorgroup : AbstractGroup (otional, default NonCooperative)     EC group type for when no aggregator is considered\n\nReturn\n\nutilitycallbackby_subgroup : Function     Function that accepts as input an AbstractVector (or Set) of users and returns     as output the benefit of the specified community\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.user_names-Tuple{Any, Any}","page":"API reference","title":"EnergyCommunity.user_names","text":"Get the list of users\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.users-Tuple{AbstractDict}","page":"API reference","title":"EnergyCommunity.users","text":"Function to get the users configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#FileIO.load-Tuple{AbstractString, AbstractEC}","page":"API reference","title":"FileIO.load","text":"load(output_file::AbstractString)\n\nFunction to save the results and the model to the hard drive\n\n\n\n\n\n","category":"method"},{"location":"API reference/#FileIO.save-Tuple{AbstractString, AbstractEC}","page":"API reference","title":"FileIO.save","text":"save(output_file::AbstractString, ECModel::AbstractEC)\n\nFunction to save the results and the model to the hard drive\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.objective_function-Tuple{AbstractEC}","page":"API reference","title":"JuMP.objective_function","text":"objective_function(ECModel::AbstractEC)\n\nGet the objective function of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.objective_value-Tuple{AbstractEC}","page":"API reference","title":"JuMP.objective_value","text":"Function to return the objective function by User\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.optimize!-Tuple{AbstractEC}","page":"API reference","title":"JuMP.optimize!","text":"Solve the optimization problem for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.result_count-Tuple{AbstractEC}","page":"API reference","title":"JuMP.result_count","text":"Solve the optimization problem for the EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#JuMP.termination_status-Tuple{AbstractEC}","page":"API reference","title":"JuMP.termination_status","text":"termination_status(ECModel::AbstractEC)\n\nCalculate the optimization status of the model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#RecipesBase.plot","page":"API reference","title":"RecipesBase.plot","text":"Function to plot the EC model\n\n\n\n\n\n","category":"function"},{"location":"API reference/#RecipesBase.plot-Tuple{AbstractGroupANC, AbstractEC, AbstractString}","page":"API reference","title":"RecipesBase.plot","text":"Function to plot the results of the Aggregated non cooperative configuration\n\n\n\n\n\n","category":"method"},{"location":"API reference/#RecipesBase.plot-Tuple{AbstractGroupCO, AbstractEC, AbstractString}","page":"API reference","title":"RecipesBase.plot","text":"Function to plot the results of the Cooperative EC\n\n\n\n\n\n","category":"method"},{"location":"API reference/#RecipesBase.plot-Tuple{AbstractGroupNC, AbstractEC, AbstractString}","page":"API reference","title":"RecipesBase.plot","text":"plot(::AbstractGroupNC, ECModel::AbstractEC, output_plot_file::AbstractString;\n    user_set::Vector=Vector(), line_width=2.0)\n\nFunction to plot the results of the user model\n\n\n\n\n\n","category":"method"},{"location":"API reference/#EnergyCommunity.ASSET_TYPE","page":"API reference","title":"EnergyCommunity.ASSET_TYPE","text":"@enum ASSET_TYPE\n\nEnumeration type to specify the type of the assets. Implemented values:\n\nLOAD: load components\nREN: renewable assets\nBATT: battery components\nCONV: battery converters\nTHER: thermal generators\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC","page":"API reference","title":"EnergyCommunity.ModelEC","text":"Structure encapsuling the data\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC-2","page":"API reference","title":"EnergyCommunity.ModelEC","text":"Constructor of a ModelEC\n\nInputs\n\ndata : Dict      Data of the EC grouptype : AbstractGroup     Type of EC optimizer     Optimizer of the model userset : Vector     Vector of the users\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC-3","page":"API reference","title":"EnergyCommunity.ModelEC","text":"Copy constructor\n\n\n\n\n\n","category":"type"},{"location":"API reference/#EnergyCommunity.ModelEC-4","page":"API reference","title":"EnergyCommunity.ModelEC","text":"Load Model from disk\n\nfile_name : str     Filename\n\n\n\n\n\n","category":"type"},{"location":"API reference/#TheoryOfGames.EnumMode-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"TheoryOfGames.EnumMode","text":"EnumMode(ECModel::AbstractEC)\n\nFunction to create the EnumMode item for the TheoryOfGames.jl package \n\n\n\n\n\n","category":"method"},{"location":"API reference/#TheoryOfGames.IterMode-Tuple{AbstractEC, AbstractGroup}","page":"API reference","title":"TheoryOfGames.IterMode","text":"IterMode(ECModel::AbstractEC, base_group_type::AbstractGroup)\n\nFunction to create the IterMode item for the TheoryOfGames.jl package \n\n\n\n\n\n","category":"method"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"EditURL = \"aggregated_non_cooperative.jl\"","category":"page"},{"location":"examples/aggregated_non_cooperative/#Aggregated-Non-Cooperative-Energy-Community","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"","category":"section"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"This example is taken from the article Optimal sizing of energy communities with fair revenue sharing and exit clauses: Value, role and business model of aggregators and users by Davide Fioriti et al, url but for a subset of users","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"The energy community considered in this example consists of 3 users, where:","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"all users can install PV system\nonly the first user cannot install batteries, whereas the others can\nthe third user can install also wind turbines","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Import the needed packages","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"using EnergyCommunity, JuMP\nusing HiGHS, Plots, FileIO","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Create a base Energy Community example in the data folder; use the default configuration.","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"folder = joinpath(@__DIR__, \"data\")\ncreate_example_data(folder, config_name=\"default\")","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Input file to load the structure of the energy community based on a yaml file.","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"input_file = joinpath(@__DIR__, \"data/energy_community_model.yml\");\nnothing #hide","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Output path of the summary and of the plots","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"output_file_isolated = joinpath(@__DIR__, \"./results/output_file_ANC.xlsx\");\noutput_plot_isolated = joinpath(@__DIR__, \"./results/Img/plot_user_{:s}_ANC.png\");\nnothing #hide","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"define optimizer and options","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"optimizer = optimizer_with_attributes(HiGHS.Optimizer, \"ipm_optimality_tolerance\"=>1e-6)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Define the Non Cooperative model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"ANC_Model = ModelEC(input_file, EnergyCommunity.GroupANC(), optimizer)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Build the mathematical model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"build_model!(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Optimize the model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"optimize!(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"get objective value","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"objective_value(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Create plots of the results","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"plot(ANC_Model, output_plot_isolated)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Print summaries of the results","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"print_summary(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Save summaries","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"save_summary(ANC_Model, output_file_isolated)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"Plot the sankey plot of resources","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"plot_sankey(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"DataFrame of the business plan","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"business_plan(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"plot business plan","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"business_plan_plot(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"save the model to a jld2 file","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"save(\"anc_model.jld2\", ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"read the loaded model from the jld2 file","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"ANC_Model_loaded = load!(\"anc_model.jld2\", ModelEC())","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"get the objective value of the loaded model","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"objective_value(ANC_Model)","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"info: Info\nView this file on Github.","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"","category":"page"},{"location":"examples/aggregated_non_cooperative/","page":"Aggregated Non-Cooperative Energy Community","title":"Aggregated Non-Cooperative Energy Community","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#What-is-EnergyCommunity.jl?","page":"Introduction","title":"What is EnergyCommunity.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"EnergyCommunity is a package for the optimal design and dispatch of Energy Communities at different level of aggregation. Provided easy to read configuration files, EnergyCommunity.jl creates a mathematical optimization model using JuMP.jl and solves it using any optimization solver compatible with JuMP.jl. The JuMP mathematical model is also editable and customized.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"EnergyCommunity.jl automatically builds a Mixed-Integer Linear Programming model that represents the optimal dispatch and design of an Energy Community. To see a simple example of the model, see the example section","category":"page"},{"location":"#Resources-for-getting-started","page":"Introduction","title":"Resources for getting started","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Please, check out the examples in the example section and the files available in the example folder of the github repository.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To learn more about the Julia framework, please check out this simple introduction or more material in julialang.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For more material on the backbone optimization framework, please refer to documentation of JuMP.jl. JuMP is a domain-specific modeling language that allows mathematical optimization embedded in Julia.","category":"page"}]
}
